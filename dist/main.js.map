{"version":3,"sources":["webpack://webjs/./src/Controllers/GridController.js","webpack://webjs/./src/Controllers/MainController.js","webpack://webjs/./src/Controllers/NavigationController.js","webpack://webjs/./src/Controllers/StepController.js","webpack://webjs/./src/Models/Data.js","webpack://webjs/./src/Models/Grid.js","webpack://webjs/./src/Models/GridBlock.js","webpack://webjs/./src/Models/Location.js","webpack://webjs/./src/Views/GridView.js","webpack://webjs/./src/Views/Helper.js","webpack://webjs/./src/Views/MainView.js","webpack://webjs/./src/Views/NavigationView.js","webpack://webjs/./src/Views/StepView.js","webpack://webjs/webpack/bootstrap","webpack://webjs/webpack/runtime/define property getters","webpack://webjs/webpack/runtime/hasOwnProperty shorthand","webpack://webjs/webpack/runtime/make namespace object","webpack://webjs/./src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAoC;;AAErB;AACf;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACpG4D;AACZ;AACA;;AAEO;AACZ;;AAEA;;AAE5B;AACf;AACA;AACA,kCAAkC,6DAAc;AAChD,4BAA4B,uDAAQ;AACpC,4BAA4B,uDAAQ;;AAEpC,kCAAkC,uDAAc;AAChD,kCAAkC,uDAAc;AAChD,wCAAwC,6DAAoB;;AAE5D;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxCyC;;AAE1B;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kCAAkC,qDAAQ,GAAG;AAC7C;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;AC/CqC;;AAEtB;AACf;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ,8DAAkB;AAC1B;AACA,YAAY,4DAAgB;AAC5B;AACA;AACA;;AAEA;AACA,YAAY,4DAAgB;AAC5B;AACA;;AAEA;AACA,YAAY,4DAAgB;AAC5B;AACA;AACA;AACA,YAAY,4DAAgB;AAC5B;AACA;;AAEA;AACA,YAAY,4DAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAkB;AAC1B;AACA,YAAY,4DAAgB;AAC5B;AACA;AACA;;AAEA,uB;AACA,YAAY,4DAAgB;AAC5B;AACA;AACA;AACA,YAAY,4DAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,8DAAkB;AAC1B;AACA,YAAY,4DAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,YAAY,4DAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,8DAAkB;AAC1B;AACA,YAAY,4DAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,YAAY,4DAAgB;AAC5B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,QAAQ,8DAAkB;AAC1B;AACA,YAAY,4DAAgB;AAC5B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,YAAY,4DAAgB;AAC5B;AACA;AACA;AACA,YAAY,4DAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,YAAY,4DAAgB;AAC5B;AACA;;AAEA,QAAQ,8DAAkB;AAC1B;AACA;AACA,YAAY,4DAAgB;AAC5B;AACA;AACA;AACA,YAAY,4DAAgB;AAC5B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA,QAAQ,8DAAkB;;AAE1B;AACA,YAAY,4DAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAgB;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;ACrOiC;;AAElB;AACf;AACA;AACA;AACA,kCAAkC,8CAAQ,GAAG;AAC7C;AACA;AACA;AACA,kCAAkC,8CAAQ,GAAG;AAC7C;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,8CAAQ;AAChD,aAAa;AACb;;AAEA,SAAS;AACT,kCAAkC,8CAAQ,GAAG;AAC7C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uDAAuD,8CAAQ,GAAG;AAClE;AACA,C;;;;;;;;;;;;;;;AClD4C;;AAE7B;;AAEf;;AAEA;AACA,uBAAuB,QAAQ;AAC/B;AACA,2BAA2B,QAAQ;AACnC;AACA,2CAA2C,sDAAS,GAAG;AACvD,iBAAiB;AACjB,uCAAuC,sDAAS;AAChD;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA,C;;;;;;;;;;;;;;ACvNe;;AAEf;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;AC1B4B;;AAEb;;AAEf;AACA;AACA;;AAEA,wBAAwB,6CAAI;AAC5B;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,iEAAiE,6CAAI;;;;AAIrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,yBAAyB;AAC/D,kDAAkD,+BAA+B;AACjF,kDAAkD,8BAA8B;AAChF,iDAAiD,6BAA6B;AAC9E,8CAA8C,8BAA8B;AAC5E,6CAA6C,+BAA+B;AAC5E,8CAA8C,8BAA8B;AAC5E,kDAAkD,gCAAgC;AAClF;;;AAGA;AACA;AACA;AACA,mDAAmD;AACnD,+DAA+D;AAC/D,6DAA6D;AAC7D,wDAAwD;AACxD,4DAA4D;AAC5D,4DAA4D;AAC5D,4DAA4D;AAC5D,gEAAgE;;AAEhE;AACA;;AAEA;AACA;AACA,sCAAsC;AACtC,kDAAkD;AAClD,kDAAkD;AAClD,iDAAiD;AACjD,8CAA8C;AAC9C,6CAA6C;AAC7C,8CAA8C;AAC9C,kDAAkD;AAClD;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC,yD;AACA,yD;AACA;AACA,yD;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC,yD;AACA,yD;AACA;AACA,yD;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC,yD;AACA,yD;AACA;AACA,yD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;AC1Le;;AAEf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,8CAA8C,WAAW;AACzD,+CAA+C,WAAW;;AAE1D;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,UAAU;AAC5C,sCAAsC,UAAU;AAChD;AACA;AACA,0CAA0C,EAAE,GAAG,EAAE;AACjD,iDAAiD,aAAa;AAC9D,gDAAgD,aAAa;AAC7D,mDAAmD,SAAS;AAC5D,kDAAkD,SAAS;AAC3D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,sBAAsB,mBAAmB;AACzC,0BAA0B,mBAAmB;AAC7C;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;;AAEA;;AAEA,qBAAqB,UAAU;AAC/B;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;;AAGA,sBAAsB,2BAA2B;AACjD;AACA;;AAEA,aAAa;AACb;;AAEA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;;AAEA;AACA,aAAa,E;;AAEb;AACA;AACA;;AAEA;;AAEA;;;;AAIA;AACA;AACA,qBAAqB;;AAErB;AA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","file":"main.js","sourcesContent":["import Grid from \"../Models/Grid.js\"\r\n\r\nexport default class GridController {\r\n    constructor(mainController, data) {\r\n        this.data = data;\r\n        this.mainController = mainController;\r\n        this.gridController = mainController.gridController;\r\n        this.gridView = mainController.gridView;\r\n        \r\n    }\r\n\r\n    refreshGrid() {\r\n            console.log(this.data.getCurrentLocation().treesAreSet)\r\n            if(!this.data.getCurrentLocation().treesAreSet && this.data.getCurrentLocation().stepsAreSet) {\r\n                this.data.getCurrentLocation().setTrees();\r\n            }\r\n            this.gridView.generateGrid();\r\n            this.gridView.refresh(this.data);\r\n            this.mainController.saveData();\r\n        }\r\n    getData() {\r\n        return data;\r\n    }\r\n\r\n    canPlace(coordinates, type) {\r\n        if(!coordinates.includes(\"x\") && !coordinates.includes(\"y\")) {\r\n            return false;\r\n        }\r\n        let x = coordinates.slice(coordinates.indexOf('x') + 1 ,coordinates.indexOf('y'));\r\n        let y = coordinates.slice(coordinates.indexOf('y') + 1 ,coordinates.length);\r\n        x = parseInt(x);\r\n        y = parseInt(y);\r\n        \r\n        let canPlace = this.data.getCurrentLocation().canPlace(x,y,type);\r\n        return canPlace;\r\n\r\n    }\r\n\r\n    setGridFill(coordinates, type){\r\n        let x = coordinates.slice(coordinates.indexOf('x') + 1 ,coordinates.indexOf('y'));\r\n        let y = coordinates.slice(coordinates.indexOf('y') + 1 ,coordinates.length);\r\n        x = parseInt(x);\r\n        y = parseInt(y);\r\n        \r\n        let canPlace = this.data.getCurrentLocation().placeItem(x,y,type);\r\n        this.mainController.saveData();\r\n       \r\n        \r\n    }\r\n\r\n    deleteGridFill(coordinates, type) {\r\n        let x = coordinates.slice(coordinates.indexOf('x') + 1 ,coordinates.indexOf('y'));\r\n        let y = coordinates.slice(coordinates.indexOf('y') + 1 ,coordinates.length);\r\n        x = parseInt(x);\r\n        y = parseInt(y);\r\n        \r\n\r\n        let canPlace = this.data.getCurrentLocation().deleteItem(x,y,type);\r\n        this.mainController.saveData();\r\n        \r\n    }\r\n\r\n    dropBack(type) {\r\n        this.data.getCurrentLocation().addItem(type);\r\n        \r\n        this.mainController.saveData();\r\n        \r\n    }\r\n    getItem(x,y) {\r\n        return this.data.getCurrentLocation().getItem(x,y);\r\n    }\r\n\r\n    updateGridImages(type){\r\n        switch(type){\r\n            case \"tent\":\r\n                this.tenten--;\r\n                break;\r\n            case \"drink\":\r\n                this.drankkramen--;\r\n                break;\r\n            case \"food\":\r\n                this.eetkramen--;\r\n                break;\r\n            case \"toilet\":\r\n                this.toiletten--;\r\n                break;\r\n            case \"prullenbak\":\r\n                this.prullenbakken--;\r\n                break;\r\n            case \"hogeboom\":\r\n                this.hogebomen--;\r\n                break;\r\n            case \"bredeboom\":\r\n                this.bredebomen--;\r\n                break;\r\n            case \"schaduwboom\":\r\n                this.schaduwbomen--;\r\n                break;\r\n        }\r\n    }\r\n}\r\n","import NavigationController from './NavigationController.js'\r\nimport StepController from './StepController.js'\r\nimport GridController from './GridController.js'\r\n\r\nimport NavigationView from '../Views/NavigationView.js'\r\nimport GridView from '../Views/GridView.js'\r\n\r\nimport StepView from '../Views/StepView.js'\r\n\r\nexport default class MainController {\r\n    constructor(data) {\r\n        this.data = data;\r\n        this.navigationView = new NavigationView();\r\n        this.stepView = new StepView();\r\n        this.gridView = new GridView();\r\n        \r\n        this.gridController = new GridController(this, data);\r\n        this.stepController = new StepController(this, data);\r\n        this.navigationController = new NavigationController(this, data);\r\n\r\n        this.stepView.init(this.stepController);\r\n        this.gridView.init(this.gridController);\r\n        this.navigationView.init(this.navigationController);\r\n\r\n        this.refreshNavigation();\r\n        this.refreshLocationScreen();\r\n    }\r\n\r\n    refreshNavigation() {\r\n        this.navigationController.refreshNavigation();\r\n    }\r\n\r\n    refreshLocationScreen() {\r\n        \r\n        this.stepController.setStep();\r\n        this.gridController.refreshGrid();\r\n    }\r\n    saveData() {\r\n        localStorage.setItem('data', JSON.stringify(this.data));\r\n    }\r\n}\r\n","import Location from \"../Models/Location\"\r\n\r\nexport default class NavigationController {\r\n    constructor(mainController, data) {\r\n        this.data = data;\r\n        this.mainController = mainController;\r\n        this.navigationController = mainController.navigationController;\r\n        this.navigationView = mainController.navigationView;\r\n    }\r\n\r\n    addLocation() {\r\n        this.data.addLocation(new Location({}));\r\n        this.data.setCurrentLocation(this.data.locations.length);\r\n        this.mainController.saveData();\r\n\r\n        this.navigationView.refreshNavigation(this.data);\r\n        this.mainController.refreshLocationScreen();\r\n\r\n    }\r\n\r\n    deleteLocation(location) {\r\n        if(this.data.locations.length <= 1) {\r\n            alert('You can not delete all locations');\r\n            return;\r\n        }\r\n        this.data.deleteLocation(location);\r\n        if(this.data.currentLocation == location) {\r\n            this.data.setCurrentLocation(1);\r\n        }\r\n        this.mainController.saveData();\r\n        this.navigationView.refreshNavigation(this.data);\r\n        this.mainController.refreshLocationScreen();\r\n    }\r\n\r\n    refreshNavigation() {\r\n        this.navigationView.refreshNavigation(this.data);\r\n    }\r\n\r\n    setCurrentLocation(location) {\r\n        this.data.setCurrentLocation(location);\r\n        this.navigationView.refreshNavigation(this.data);\r\n        this.mainController.refreshLocationScreen();\r\n    }\r\n\r\n    getCurrentLocation() {\r\n        return this.data.currentLocation();\r\n    }\r\n}","import Helper from \"../Views/Helper\";\r\n\r\nexport default class StepController {\r\n    constructor(mainController, data) {\r\n        this.data = data;\r\n        this.mainController = mainController;\r\n        this.stepController = mainController.stepController;\r\n        this.stepView = mainController.stepView;\r\n    }\r\n\r\n    \r\n    setStep() {\r\n        let location = this.data.getCurrentLocation();\r\n        \r\n        if(location.name == null || location.visitors == null) {\r\n            this.stepView.generateStep1();\r\n        }\r\n        else if(location.tents == null) {\r\n            this.stepView.generateStep2();\r\n        }\r\n        else if(location.eatingStands == null) {\r\n            this.stepView.generateStep3();\r\n        }\r\n        else if(location.drinkStands == null) {\r\n            this.stepView.generateStep4();\r\n        }\r\n        else if(location.highTrees == null) {\r\n            this.stepView.generateStep5();\r\n        }\r\n        else if(location.toiletBuildings == null) {\r\n            this.stepView.generateStep6();\r\n        }\r\n        else if(location.trashcans == null) {\r\n            this.stepView.generateStep7();\r\n        } else {\r\n            this.stepView.generateFinal();\r\n        }\r\n    }\r\n\r\n    resetConfig() {\r\n        this.data.resetCurrentLocation();\r\n        this.mainController.refreshNavigation();\r\n        this.mainController.refreshLocationScreen();\r\n        this.stepView.generateStep1();\r\n        this.mainController.saveData();\r\n    \r\n    }\r\n    //post step1\r\n    step1(name, visitors) {\r\n        Helper.clearErrors();\r\n        if(visitors.length <= 0) {\r\n            Helper.setErrors(\"Please fil in a amount of visitors\");\r\n            return;\r\n        }\r\n        visitors = parseInt(visitors);\r\n        \r\n        if(name.length <= 0) {\r\n            Helper.setErrors(\"Please fill in a name\");\r\n            return;\r\n        }\r\n        \r\n        if(visitors.length <= 0) {\r\n            Helper.setErrors(\"Please fill in the amount of visitors\");\r\n             return;\r\n        }\r\n        if(name.length > 20) {\r\n            Helper.setErrors(\"Name can't be longer than 20 characters\");\r\n            return;\r\n        }\r\n    \r\n        if(visitors > 100000) {\r\n            Helper.setErrors(\"There's a maximum of 100000 visitors\");\r\n            return;\r\n        }\r\n        this.data.getCurrentLocation().setName(name);\r\n        this.data.getCurrentLocation().setVisitors(visitors);\r\n        this.mainController.refreshNavigation();\r\n        this.stepView.generateStep2();\r\n        localStorage.setItem('data', JSON.stringify(this.data));\r\n    }\r\n    //post step2\r\n    step2(tents) {\r\n        Helper.clearErrors();\r\n        if(tents.length <= 0) {\r\n            Helper.setErrors(\"Please fill in an amount\");\r\n            return;\r\n        }\r\n        tents = parseInt(tents);\r\n        \r\n        if(tents < 0) { \r\n            Helper.setErrors(\"Please fill in an amount that's between 0 and 6\");\r\n            return\r\n        }\r\n        if(tents > 6) {\r\n            Helper.setErrors(\"You can only have a maximum amonut of 6 tents\");\r\n            return;\r\n        }\r\n        this.data.getCurrentLocation().setAmountOfTents(tents);\r\n        this.stepView.generateStep3();\r\n        localStorage.setItem('data', JSON.stringify(this.data));\r\n    }\r\n\r\n    //post step3 \r\n    step3 (eatingStands) {\r\n        Helper.clearErrors();\r\n        if(eatingStands.length <= 0) {\r\n            Helper.setErrors(\"Please fill in an amount\");\r\n            return;\r\n        }\r\n        eatingStands = parseInt(eatingStands);\r\n        let maxEatingStands;\r\n        if(this.data.getCurrentLocation().tents >= 1) {\r\n            maxEatingStands = 3;\r\n        } else {\r\n            maxEatingStands = 6;\r\n        }\r\n        if(eatingStands > maxEatingStands) {\r\n            Helper.setErrors(\"You can only have a maximum of \"+ maxEatingStands + \" eating stands\");\r\n            return;\r\n        }\r\n        this.data.getCurrentLocation().setAmountOfEatingStands(eatingStands);\r\n        this.stepView.generateStep4();\r\n        localStorage.setItem('data', JSON.stringify(this.data));\r\n    }\r\n\r\n    //post step4\r\n    step4 (drinkStands) {\r\n        Helper.clearErrors();\r\n        if(drinkStands.length <= 0) {\r\n            Helper.setErrors(\"Please fill in an amount\");\r\n            return;\r\n        }\r\n        drinkStands = parseInt(drinkStands);\r\n        let maxDrinkStands\r\n        if(this.data.getCurrentLocation().tents >= 1) {\r\n            maxDrinkStands = 2;\r\n        } else {\r\n            maxDrinkStands = 4;\r\n        }\r\n        if(drinkStands > maxDrinkStands) {\r\n            Helper.setErrors(\"You can only have a maximum of \"+ maxDrinkStands + \" drink stands\");\r\n            return;\r\n        }\r\n        this.data.getCurrentLocation().setAmountOfDrinkStands(drinkStands);\r\n        this.stepView.generateStep5();\r\n        localStorage.setItem('data', JSON.stringify(this.data));\r\n        \r\n    }\r\n\r\n    //post step5\r\n    step5(highTrees, wideTrees, shadowTrees) {\r\n        Helper.clearErrors();\r\n        if(highTrees.length <= 0 || wideTrees.length <= 0 || shadowTrees.length <= 0) {\r\n            Helper.setErrors(\"Please fill in an amount at every tree\");\r\n            return;\r\n        }\r\n        highTrees = parseInt(highTrees);\r\n        wideTrees = parseInt(wideTrees);\r\n        shadowTrees = parseInt(shadowTrees);\r\n        \r\n        let totalTrees = highTrees + wideTrees + shadowTrees;\r\n\r\n        if(highTrees < 0 || wideTrees < 0 || shadowTrees < 0) {\r\n            Helper.setErrors(\"You can't choose less than 0 trees of some sort\");\r\n            return;\r\n        }\r\n        if(totalTrees > 10) {\r\n            Helper.setErrors(\"You can only have a maximum of 10 trees\");\r\n            return;\r\n        }\r\n        this.data.getCurrentLocation().setAmountOfHighTrees(highTrees);\r\n        this.data.getCurrentLocation().setAmountOfWideTrees(wideTrees);\r\n        this.data.getCurrentLocation().setAmountOfShadowTrees(shadowTrees);\r\n        this.stepView.generateStep6();\r\n        localStorage.setItem('data', JSON.stringify(this.data));\r\n\r\n    }\r\n\r\n    step6(toiletBuildings) {\r\n        if(toiletBuildings.length <= 0) {\r\n            Helper.setErrors(\"Please fill in an amount\");\r\n            return;\r\n        }\r\n\r\n        Helper.clearErrors();\r\n        toiletBuildings = parseInt(toiletBuildings);\r\n        if(toiletBuildings < 0) {\r\n            Helper.setErrors(\"You cannot have a negative amount of toilet buildings\");\r\n            return;\r\n        }\r\n        if(toiletBuildings > 5) {\r\n            Helper.setErrors(\"You cant have more than 6 toilet buildings\");\r\n            return;\r\n        }\r\n\r\n        this.data.getCurrentLocation().setAmountOfToiletBuildings(toiletBuildings);\r\n\r\n        let filled = this.data.getCurrentLocation().getAmountOfFieldsFilled();\r\n        let nonfilled = 15 * 15 - filled;\r\n        let maximumAmountOfTrashcans = parseInt(filled * 0.05);\r\n        this.stepView.generateStep7(maximumAmountOfTrashcans);\r\n        localStorage.setItem('data', JSON.stringify(this.data));\r\n\r\n    }\r\n\r\n    step7(trashcans) {\r\n        \r\n\r\n        Helper.clearErrors();\r\n\r\n        if(trashcans.length <= 0) {\r\n            Helper.setErrors(\"Please fill in an amount\");\r\n            return;\r\n        }\r\n        trashcans = parseInt(trashcans);\r\n        let filled = this.data.getCurrentLocation().getAmountOfFieldsFilled();\r\n        let nonfilled = 15 * 15 - filled;\r\n        let maximumAmountOfTrashcans = parseInt(filled * 0.05);\r\n        if(trashcans > maximumAmountOfTrashcans) {\r\n            Helper.setErrors(\"You can only have a maximum of \" + maximumAmountOfTrashcans + \" trashcans.\");\r\n            return;\r\n        }\r\n\r\n        this.data.getCurrentLocation().setAmountOfTrashCans(trashcans);\r\n        this.data.getCurrentLocation().setStepsAreSet(true);\r\n        localStorage.setItem('data', JSON.stringify(this.data));\r\n        this.stepView.generateFinal();\r\n        this.mainController.refreshLocationScreen();\r\n    }\r\n}","import Location from \"./Location\"\r\n\r\nexport default class Data {\r\n    constructor(dataobject) {\r\n        console.log(dataobject);\r\n        if(dataobject == null) {\r\n            this.locations = [new Location({})];\r\n            this.currentLocation = 1;\r\n        }\r\n        else if(dataobject.locations.length <= 0) {\r\n            this.locations = [new Location({})];\r\n            this.currentLocation = 1;\r\n        }\r\n        else if(dataobject != null) {\r\n            this.locations = [];\r\n            \r\n            dataobject.locations.forEach(element => {\r\n                this.locations.push(new Location(element));\r\n            });\r\n            this.currentLocation = dataobject.currentLocation;\r\n            \r\n        } else {\r\n            this.locations = [new Location({})];\r\n            this.currentLocation = 1;\r\n        }\r\n        \r\n    }\r\n\r\n    addLocation(location) {\r\n        this.locations.push(location);\r\n    }\r\n    deleteLocation(location) {\r\n        if(location == this.currentLocation) {\r\n           this.currentLocation = 1;\r\n        }\r\n        this.locations.splice(location - 1,1)\r\n    }\r\n    getLocation(location) {\r\n        return this.locations[location - 1];\r\n    }\r\n    setCurrentLocation(location) {\r\n        this.currentLocation = location;\r\n    }\r\n    getCurrentLocation() {\r\n        \r\n        return this.locations[this.currentLocation - 1];\r\n    }\r\n    resetCurrentLocation() {\r\n        this.locations[this.currentLocation - 1] = new Location({});\r\n    }\r\n}","import GridBlock from \"../Models/GridBlock\";\r\n\r\nexport default class Grid {\r\n    \r\n    constructor(grid) {\r\n\r\n        this.array = [];\r\n        for (var i = 0; i < 15; i++) {\r\n            this.array[i] = [];\r\n            for (var j = 0; j < 15; j++) {\r\n                if(grid == null) {\r\n                    this.array[i][j] = new GridBlock({});\r\n                } else{\r\n                this.array[i][j] = new GridBlock(grid.array[i][j]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    getItem(x,y) {\r\n        return this.array[x][y].getFillType();\r\n    }\r\n    placeTent(x,y) {\r\n        this.array[x-1][y-1].setFillType(\"tentSurface\");\r\n        this.array[x][y-1].setFillType(\"tentSurface\");\r\n        this.array[x+1][y-1].setFillType(\"tentSurface\");\r\n        this.array[x-1][y].setFillType(\"tentSurface\");\r\n        this.array[x+1][y].setFillType(\"tentSurface\");\r\n        this.array[x-1][y+1].setFillType(\"tentSurface\");\r\n        this.array[x][y+1].setFillType(\"tentSurface\");\r\n        this.array[x+1][y+1].setFillType(\"tentSurface\");\r\n        this.array[x][y].setFillType(\"tent\");\r\n    }\r\n\r\n    \r\n\r\n    placeFoodStand(x,y) {\r\n        this.array[x][y].setFillType(\"foodStand\");\r\n    }\r\n\r\n    placeDrinkStand(x,y) {\r\n        this.array[x][y-1].setFillType(\"drinkStandSurface\");\r\n        this.array[x][y].setFillType(\"drinkStand\");\r\n    }\r\n    placeToilets(x,y) {\r\n        this.array[x][y-1].setFillType(\"toiletSurface\");\r\n        this.array[x][y+1].setFillType(\"toiletSurface\");\r\n        this.array[x][y].setFillType(\"toilet\");\r\n    }\r\n\r\n    placeHighTrees(x,y) {\r\n        this.array[x][y].setFillType(\"highTree\");\r\n        \r\n    }\r\n\r\n    placeWideTrees(x,y) {\r\n        this.array[x][y].setFillType(\"wideTree\");\r\n        this.array[x+1][y].setFillType(\"wideTreeSurface\");\r\n        \r\n    }\r\n    placeShadowTrees(x,y) {\r\n        this.array[x-1][y-1].setFillType(\"shadowTreeSurface\");\r\n        this.array[x][y-1].setFillType(\"shadowTreeSurface\");\r\n        this.array[x+1][y-1].setFillType(\"shadowTreeSurface\");\r\n        this.array[x-1][y].setFillType(\"shadowTreeSurface\");\r\n        this.array[x+1][y].setFillType(\"shadowTreeSurface\");\r\n        this.array[x-1][y+1].setFillType(\"shadowTreeSurface\");\r\n        this.array[x][y+1].setFillType(\"shadowTreeSurface\");\r\n        this.array[x+1][y+1].setFillType(\"shadowTreeSurface\");\r\n        this.array[x][y].setFillType(\"shadowTree\");\r\n    }\r\n\r\n    placeTrashcans( x,y) {\r\n        this.array[x][y].setFillType(\"trashcan\");\r\n    }\r\n    deleteTent(x,y) {\r\n        this.array[x-1][y-1].setFillType(null);\r\n        this.array[x][y-1].setFillType(null);\r\n        this.array[x+1][y-1].setFillType(null);\r\n        this.array[x-1][y].setFillType(null);\r\n        this.array[x+1][y].setFillType(null);\r\n        this.array[x-1][y+1].setFillType(null);\r\n        this.array[x][y+1].setFillType(null);\r\n        this.array[x+1][y+1].setFillType(null);\r\n        this.array[x][y].setFillType(null);\r\n    }\r\n    deleteFoodStand(x,y) {\r\n        this.array[x][y].setFillType(null);\r\n    }\r\n\r\n    deleteDrinkStand(x,y) {\r\n        this.array[x][y-1].setFillType(null);\r\n        this.array[x][y].setFillType(null);\r\n    }\r\n    deleteToilets(x,y) {\r\n        this.array[x][y-1].setFillType(null);\r\n        this.array[x][y+1].setFillType(null);\r\n        this.array[x][y].setFillType(null);\r\n    }\r\n\r\n    deleteHighTrees(x,y) {\r\n        this.array[x][y].setFillType(null);\r\n        \r\n    }\r\n\r\n    deleteWideTrees(x,y) {\r\n        this.array[x][y].setFillType(null);\r\n        this.array[x+1][y].setFillType(null);\r\n        \r\n    }\r\n    deleteShadowTrees(x,y) {\r\n        this.array[x-1][y-1].setFillType(null);\r\n        this.array[x][y-1].setFillType(null);\r\n        this.array[x+1][y-1].setFillType(null);\r\n        this.array[x-1][y].setFillType(null);\r\n        this.array[x+1][y].setFillType(null);\r\n        this.array[x-1][y+1].setFillType(null);\r\n        this.array[x][y+1].setFillType(null);\r\n        this.array[x+1][y+1].setFillType(null);\r\n        this.array[x][y].setFillType(null);\r\n    }\r\n\r\n    deleteTrashcans( x,y) {\r\n        this.array[x][y].setFillType(null);\r\n    }\r\n    canPlaceTent(x,y) {\r\n        \r\n        if(x < 1 || y < 1 || x > 13 || y > 13) {\r\n            return false;\r\n        }\r\n        if(this.array[x-1][y-1].getFillType() != null || this.array[x][y-1].getFillType() != null || this.array[x+1][y-1].getFillType() != null) {\r\n            return false;\r\n        }\r\n        if(this.array[x-1][y].getFillType() != null || this.array[x+1][y].getFillType() != null || this.array[x-1][y+1].getFillType() != null) {\r\n            return false;\r\n        }\r\n        if(this.array[x][y+1].getFillType() != null || this.array[x+1][y+1].getFillType() != null || this.array[x][y].getFillType() != null) {\r\n            return false;\r\n\r\n        }\r\n        \r\n        return true;\r\n\r\n    }\r\n    canPlaceFoodStand(x,y) {\r\n        if(this.array[x][y].getFillType() != null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    canPlaceDrinkStand(x,y) {\r\n        if(y < 1) {\r\n            return false;\r\n        }\r\n        if(this.array[x][y].getFillType() != null || this.array[x][y-1].getFillType() != null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    canPlaceToilets(x,y) {\r\n        if(y < 1 || y > 13) {\r\n            return false;\r\n        }\r\n        if(this.array[x][y].getFillType() != null || this.array[x][y-1].getFillType() != null|| this.array[x][y+1].getFillType() != null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    canPlaceHighTrees(x,y) {\r\n        if(this.array[x][y].getFillType() != null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    canPlaceWideTrees(x,y) {\r\n        if(x > 13) {\r\n            return false;\r\n        }\r\n        if(this.array[x][y].getFillType() != null || this.array[x+1][y].getFillType() != null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    canPlaceShadowTrees(x,y) {\r\n        if(x < 1 || y < 1 || x > 13 || y > 13) {\r\n            return false;\r\n        }\r\n        if(this.array[x-1][y-1].getFillType() != null || this.array[x][y-1].getFillType() != null || this.array[x+1][y-1].getFillType() != null) {\r\n            return false;\r\n        }\r\n        if(this.array[x-1][y].getFillType() != null || this.array[x+1][y].getFillType() != null || this.array[x-1][y+1].getFillType() != null) {\r\n            return false;\r\n        }\r\n        if(this.array[x][y+1].getFillType() != null || this.array[x+1][y+1].getFillType() != null || this.array[x][y].getFillType() != null) {\r\n            return false;\r\n\r\n        }\r\n        return true;\r\n    }\r\n\r\n    canPlaceTrashcans( x,y) {\r\n        if(this.array[x][y].getFillType() != null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n        \r\n\r\n\r\n}","export default class GridBlock {\r\n    \r\n    constructor(gridblock) {\r\n        this.fillType =null;\r\n        this.isFilled =null;\r\n        if(typeof gridblock.isFilled !== 'undefined') this.isFilled = gridblock.isFilled;\r\n        if(typeof gridblock.fillType !== 'undefined') this.fillType = gridblock.fillType;\r\n    }\r\n\r\n  \r\n    setFilled(newIsFilled) {\r\n        this.isFilled = newIsFilled;\r\n       \r\n    }\r\n\r\n    getFilled() {\r\n        return this.isFilled;\r\n    }\r\n\r\n    setFillType(newFillType) {\r\n        this.fillType = newFillType;\r\n    }\r\n\r\n    getFillType() {\r\n        return this.fillType;\r\n    }\r\n}","import Grid from './Grid.js'\r\n\r\nexport default class Location {\r\n\r\n    constructor(location) {\r\n        this.treesAreSet = false;\r\n        this.stepsAreSet = false;\r\n        \r\n        this.grid = new Grid(null);\r\n        if(typeof location.treesAreSet !== 'undefined') this.treesAreSet = location.treesAreSet;\r\n\r\n        if(typeof location.stepsAreSet !== 'undefined') this.stepsAreSet = location.stepsAreSet;\r\n        \r\n        if(typeof location.name !== 'undefined') this.name = location.name;\r\n        \r\n        if(typeof location.visitors !== 'undefined') this.visitors = location.visitors;\r\n\r\n        if(typeof location.tents !== 'undefined') this.tents = location.tents;\r\n\r\n        if(typeof location.eatingStands !== 'undefined') this.eatingStands = location.eatingStands;\r\n\r\n        if(typeof location.drinkStands !== 'undefined') this.drinkStands = location.drinkStands;\r\n        \r\n        if(typeof location.highTrees !== 'undefined') this.highTrees = location.highTrees;\r\n \r\n        if(typeof location.wideTrees !== 'undefined') this.wideTrees = location.wideTrees;\r\n\r\n        if(typeof location.shadowTrees !== 'undefined') this.shadowTrees = location.shadowTrees;\r\n\r\n        if(typeof location.toiletBuildings !== 'undefined') this.toiletBuildings = location.toiletBuildings;\r\n\r\n        if(typeof location.trashcans !== 'undefined') this.trashcans = location.trashcans;\r\n\r\n        if(typeof location.grid !== 'undefined') this.grid = new Grid(location.grid);\r\n        \r\n    \r\n        \r\n    }\r\n    canPlace(x,y, type) {\r\n        switch (type) {\r\n            case \"tent\": return this.grid.canPlaceTent(x,y);\r\n            case \"drinkStand\":return this.grid.canPlaceDrinkStand(x,y);\r\n            case \"foodStand\": return this.grid.canPlaceFoodStand(x,y);\r\n            case \"toilet\": return this.grid.canPlaceToilets(x,y);\r\n            case \"trashcan\": return this.grid.canPlaceTrashcans(x,y);\r\n            case \"highTree\": return this.grid.canPlaceHighTrees(x,y);\r\n            case \"wideTree\": return this.grid.canPlaceWideTrees(x,y);\r\n            case \"shadowTree\": return this.grid.canPlaceShadowTrees(x,y);\r\n            case \"default\": return true;\r\n        }\r\n    }\r\n\r\n    placeItem(x,y,type) {\r\n        switch (type) {\r\n            case \"tent\": this.tents--;this.grid.placeTent(x,y); break;\r\n            case \"drinkStand\": this.drinkStands--;this.grid.placeDrinkStand(x,y);break;\r\n            case \"foodStand\": this.eatingStands--;this.grid.placeFoodStand(x,y);break;\r\n            case \"toilet\":this.toiletBuildings--; this.grid.placeToilets(x,y);break;\r\n            case \"trashcan\": this.trashcans--;this.grid.placeTrashcans(x,y);break;\r\n            case \"highTree\":this.highTrees--; this.grid.placeHighTrees(x,y);break;\r\n            case \"wideTree\": this.wideTrees--;this.grid.placeWideTrees(x,y);break;\r\n            case \"shadowTree\": this.shadowTrees--;this.grid.placeShadowTrees(x,y);break;\r\n        }\r\n\r\n        \r\n    }\r\n    deleteItem(x,y,type) {\r\n        switch (type) {\r\n            case \"tent\": this.grid.deleteTent(x,y); break;\r\n            case \"drinkStand\": this.grid.deleteDrinkStand(x,y);break;\r\n            case \"foodStand\": this.grid.deleteFoodStand(x,y);break;\r\n            case \"toilet\": this.grid.deleteToilets(x,y);break;\r\n            case \"trashcan\": this.grid.deleteTrashcans(x,y);break;\r\n            case \"highTree\": this.grid.deleteHighTrees(x,y);break;\r\n            case \"wideTree\": this.grid.deleteWideTrees(x,y);break;\r\n            case \"shadowTree\": this.grid.deleteShadowTrees(x,y);break;\r\n            \r\n        }\r\n    }\r\n\r\n    addItem(type) {\r\n        switch (type) {\r\n            case \"tent\": this.tents++; return;\r\n            case \"drinkStand\": this.drinkStands++; return;\r\n            case \"foodStand\": this.eatingStands++; return;\r\n            case \"toilet\":this.toiletBuildings++; return;\r\n            case \"trashcan\": this.trashcans++; return;\r\n            case \"highTree\":this.highTrees++; return;\r\n            case \"wideTree\": this.wideTrees++; return;\r\n            case \"shadowTree\": this.shadowTrees++; return;\r\n        }\r\n    }\r\n    setTrees() {\r\n        this.treesAreSet = true;\r\n        for(let i = 0; this.highTrees; i++) {\r\n            let x = Math.floor(Math.random() * (14 + 1)); \r\n            let y = Math.floor(Math.random() * (14 + 1)); \r\n            while(!this.canPlace(x,y,\"highTree\")) {\r\n                x = Math.floor(Math.random() * (14 + 1)); \r\n                y = Math.floor(Math.random() * (14 + 1));\r\n            }\r\n            this.placeItem(x,y,\"highTree\");\r\n        }\r\n        for(let i = 0; this.wideTrees; i++) {\r\n            let x = Math.floor(Math.random() * (14 + 1)); \r\n            let y = Math.floor(Math.random() * (14 + 1)); \r\n            while(!this.canPlace(x,y,\"wideTree\")) {\r\n                x = Math.floor(Math.random() * (14 + 1)); \r\n                y = Math.floor(Math.random() * (14 + 1));\r\n            }\r\n            this.placeItem(x,y,\"wideTree\");\r\n        }\r\n        for(let i = 0; this.shadowTrees; i++) {\r\n            let x = Math.floor(Math.random() * (14 + 1)); \r\n            let y = Math.floor(Math.random() * (14 + 1)); \r\n            while(!this.canPlace(x,y,\"shadowTree\")) {\r\n                x = Math.floor(Math.random() * (14 + 1)); \r\n                y = Math.floor(Math.random() * (14 + 1));\r\n            }\r\n            this.placeItem(x,y,\"shadowTree\");\r\n        }\r\n    }\r\n    setStepsAreSet(boolean) {\r\n        this.stepsAreSet = boolean;\r\n    }\r\n    \r\n    setName(name) {\r\n        this.name = name;\r\n    }\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    getVisitors() {\r\n        return this.visitors;\r\n    }\r\n\r\n    setVisitors(visitors) {\r\n        this.visitors = visitors;\r\n    }\r\n\r\n    setAmountOfTents(tents) {\r\n        this.tents = tents;\r\n    }\r\n\r\n    setAmountOfEatingStands(stands) {\r\n        this.eatingStands = stands;\r\n    }\r\n\r\n    setAmountOfDrinkStands(stands) {\r\n        this.drinkStands = stands;\r\n    }\r\n\r\n    setAmountOfHighTrees(trees) {\r\n        this.highTrees = trees;\r\n    }\r\n\r\n    setAmountOfWideTrees(trees) {\r\n        this.wideTrees = trees;\r\n    }\r\n\r\n    setAmountOfShadowTrees(trees) {\r\n        this.shadowTrees = trees;\r\n    }\r\n\r\n    setAmountOfToiletBuildings(toiletBuildings) {\r\n        this.toiletBuildings = toiletBuildings;\r\n    }\r\n\r\n    setAmountOfTrashCans(trashcans) {\r\n        this.trashcans = trashcans;\r\n    }\r\n    getAmountOfFieldsFilled() {\r\n        let filled = 0;\r\n        filled = this.tents * 9;\r\n        filled = filled + (this.eatingStands);\r\n        filled = filled + (this.drinkStands * 2);\r\n        filled = filled + (this.highTrees);\r\n        filled = filled + (this.wideTrees * 2);\r\n        filled = filled + (this.shadowTrees * 9);\r\n        filled = filled + (this.toiletBuildings * 3);\r\n\r\n        return filled;\r\n    }\r\n    getItem(x,y) {\r\n        return this.grid.getItem(x,y);\r\n    }\r\n}","export default class GridView {\r\n    \r\n    constructor() {\r\n        this.windowSize = 750;\r\n        this.gridSize = 15;\r\n        this.paneSize = this.windowSize / this.gridSize;\r\n     }\r\n\r\n    init(gridController) {\r\n        this.gridController = gridController;\r\n    }\r\n\r\n    refresh(data) {\r\n       \r\n        this.drawGridItems();\r\n        this.generateImages(data);\r\n        this.dropEvents();\r\n        \r\n    }\r\n\r\n\r\n    generateGrid() {\r\n        let paneSize = this.paneSize;\r\n        let windowSize = this.windowSize;\r\n        console.log(paneSize);\r\n\r\n       \r\n\r\n        const grid = document.getElementById(\"grid\");\r\n                        grid.style.position = \"relative\";\r\n                        grid.style.width = `${windowSize}px`;\r\n                        grid.style.height = `${windowSize}px`;\r\n\r\n                        while (grid.firstChild) {\r\n                            grid.removeChild(grid.firstChild);\r\n                        }\r\n                        \r\n        let rows = this.gridSize;\r\n                    let cols = this.gridSize;\r\n                    for(let x = 0; x < rows; x++) {\r\n                        for(let y = 0; y < cols; y++) {\r\n                            const gridPane = document.createElement(\"div\");\r\n                        gridPane.className =  `border gridpane absolute border border-gray-100 hover:bg-gray-400 dropzone`;\r\n                        gridPane.id = `x${x}y${y}`;\r\n                        gridPane.style.left = `${x * paneSize}px`;\r\n                        gridPane.style.top = `${y * paneSize}px`;\r\n                        gridPane.style.height = `${paneSize}px`;\r\n                        gridPane.style.width = `${paneSize}px`;\r\n                        gridPane.style.position = \"absolute\";\r\n                        grid.appendChild(gridPane);\r\n                        let item = this.gridController.getItem(x,y);\r\n                        if(item == \"tent\" || item == \"drinkStand\" || item == \"toilet\" || item == \"foodStand\" || item == \"trashcan\") {\r\n                            let image = this.getImageBlock(item);\r\n                           \r\n                            gridPane.insertBefore(image, gridPane.firstChild);\r\n                        }\r\n                        if( item == \"wideTree\" || item == \"highTree\" || item == \"shadowTree\" ) {\r\n                            let image = this.getImageBlock(item);\r\n                            \r\n                            gridPane.insertBefore(image, gridPane.firstChild);\r\n                        }\r\n                        }\r\n                    }\r\n                    \r\n    }\r\n\r\n    drawGridItems() {\r\n        for(let x = 0; x < this.gridSize; x++) {\r\n            for(let y = 0; y < this.gridSize; y++) {\r\n                let type = this.gridController.getItem(x,y);\r\n               \r\n                document.getElementById('x' + x + 'y' + y).style.backgroundColor = \"white\";\r\n                if(type == \"tentSurface\" || type == \"tent\") {\r\n                    document.getElementById('x' + x + 'y' + y).style.backgroundColor = \"yellow\";\r\n                } else if(type ==\"drinkStandSurface\" || type == \"drinkStand\") {\r\n                    document.getElementById('x' + x + 'y' + y).style.backgroundColor = \"red\";\r\n                } else if(type ==\"toiletSurface\" || type == \"toilet\") {\r\n                    document.getElementById('x' + x + 'y' + y).style.backgroundColor = \"grey\";\r\n                } else if(type ==\"highTreeSurface\" || type ==\"wideTreeSurface\" || type == \"shadowTreeSurface\" || type==\"highTree\" || type == \"wideTree\" || type==\"shadowTree\") {\r\n                    document.getElementById('x' + x + 'y' + y).style.backgroundColor = \"green\";\r\n                } else if(type ==\"foodStand\") {\r\n                    document.getElementById('x' + x + 'y' + y).style.backgroundColor = \"brown\";\r\n                }\r\n                 else if(type ==\"trashcan\") {\r\n                document.getElementById('x' + x + 'y' + y).style.backgroundColor = \"grey\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n   \r\n    generateImages(data) {\r\n        let block = document.getElementById(\"images_block\");\r\n\r\n        while (block.firstChild) {\r\n            block.removeChild(block.firstChild);\r\n        }\r\n        this.generateImage('tent', data.getCurrentLocation().tents, block);\r\n        this.generateImage('foodStand',  data.getCurrentLocation().eatingStands, block);\r\n        this.generateImage('drinkStand',  data.getCurrentLocation().drinkStands, block);\r\n        this.generateImage('toilet',  data.getCurrentLocation().toiletBuildings, block);\r\n        this.generateImage('trashcan',  data.getCurrentLocation().trashcans, block);\r\n    } \r\n\r\n    generateImage(type, amount, parent){\r\n        \r\n        for(let i =0;i< amount;i++){\r\n            let image = this.getImageBlock(type);\r\n            image.style.width = \"50px\";\r\n            image.style.height = \"50px\";\r\n            parent.appendChild(image);\r\n        }\r\n        \r\n    }\r\n\r\n    getImageBlock(type) {\r\n        let image = document.createElement(\"img\");\r\n        image.src = \"../src/images/\"+ type +\".png\";\r\n        image.id = type;\r\n        image.setAttribute('draggable', 'true');\r\n        image.className = \"draggable-item\";\r\n        return image;\r\n    }\r\n\r\n    dropEvents(){\r\n        let draggableItems = document.getElementsByClassName('draggable-item');\r\n        let dropzones = document.getElementsByClassName('dropzone');\r\n        \r\n        \r\n        let element;\r\n        \r\n        \r\n        for(let i = 0; i < draggableItems.length;i++) {\r\n            draggableItems[i].addEventListener('dragstart', (e) => {\r\n                element = e.target;\r\n                \r\n            });\r\n        }\r\n        \r\n        for(let i = 0; i < dropzones.length; i++) {\r\n            dropzones[i].addEventListener('dragover', (e) => {\r\n                e.preventDefault();\r\n                if(element.parentNode.classList.contains(\"dropzone\")) {\r\n                    this.gridController.deleteGridFill(element.parentNode.id, element.id);\r\n                    \r\n                }\r\n            }); \r\n    \r\n            dropzones[i].addEventListener('drop', (e) => {\r\n                if(this.gridController.canPlace(e.target.id, element.id)) {\r\n                    e.preventDefault();\r\n                    \r\n                    e.target.insertBefore(element, e.target.firstChild);\r\n                    \r\n                    this.gridController.setGridFill(e.target.id, element.id);\r\n                    \r\n                    \r\n    \r\n                    element.addEventListener('dragstart',  (e) => {\r\n                        element = e.target;\r\n                    });\r\n                    \r\n                    e.stopImmediatePropagation();\r\n                } else {\r\n                    alert(\"you cant place your item right here\");\r\n                    if(element.parentNode.classList.contains(\"dropzone\")) {\r\n                        this.gridController.setGridFill(element.parentNode.id, element.id);\r\n                    }\r\n                   \r\n                    \r\n                }\r\n                this.drawGridItems();\r\n               \r\n            });       \r\n    \r\n            \r\n        }\r\n        \r\n        let dropbackzone = document.querySelector('#dropbackzone');\r\n        dropbackzone.addEventListener('dragover', (e) => {\r\n            e.preventDefault();\r\n            \r\n            \r\n            \r\n        }); \r\n\r\n        dropbackzone.addEventListener('drop', (e) => {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n\r\n            if(element.parentNode.classList.contains(\"dropzone\")) {\r\n            \r\n                this.gridController.dropBack(element.id);\r\n                \r\n                let block = document.getElementById(\"images_block\");\r\n                element.style.width = \"50px\";\r\n                element.style.height = \"50px\";\r\n                block.appendChild(element);   \r\n            } else {\r\n                alert(\"you cant place your item right here\");\r\n                \r\n                    this.gridController.setGridFill(element.parentNode.id, element.id);\r\n                \r\n               \r\n            }\r\n            this.drawGridItems();\r\n           \r\n            \r\n\r\n        })\r\n        }\r\n        \r\n\r\n        \r\n}","export default class Helper {\r\n    static getButton(name, onclick) {\r\n        let button = document.createElement(\"button\");\r\n        button.innerHTML = name;\r\n        button.className = 'p-2 bg-green-500 hover:bg-green-800 hover:text-white w-full';\r\n        button.onclick = onclick;\r\n        return button;\r\n    }\r\n    static getLabel(text, forname) {\r\n        let inputLabel = document.createElement(\"label\");\r\n        inputLabel.htmlFor = forname;\r\n        inputLabel.innerHTML = text;\r\n        return inputLabel;\r\n    }\r\n    static getInputField(id, type) {\r\n        let input = document.createElement(\"input\");\r\n        input.setAttribute('type', type);\r\n        input.attributes.required = \"required\";\r\n        input.id = id;\r\n        return input;\r\n    }\r\n    static getDivForInput(label, input) {\r\n        let inputblock = document.createElement(\"div\");\r\n        inputblock.appendChild(label);\r\n        inputblock.appendChild(input);\r\n        inputblock.className = \"mb-5 flex flex-col\";\r\n        return inputblock;\r\n    }\r\n\r\n    static appendChilds(childs, parent) {\r\n        childs.forEach(child => {parent.appendChild(child)});\r\n    }\r\n\r\n    static clearErrors() {\r\n        let errorbox = document.getElementById(\"errorbox\");\r\n        errorbox.style.display = \"none\";\r\n        errorbox.innerHTML = \"\";\r\n    }\r\n\r\n    static setErrors(errors) {\r\n        if(errors != null) {\r\n                let errorbox = document.getElementById(\"errorbox\");\r\n                errorbox.style.display = \"block\";\r\n                errorbox.innerHTML = errors;\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nlet helper = new Helper();","import Helper from \"./Helper\";\r\n\r\nexport default class MainView {\r\n    \r\n\r\n    init(mainController, navigationController, stepController) {\r\n        this.mainController = mainController;\r\n        this.navigationController = navigationController;\r\n        this.stepController = stepController;\r\n\r\n    \r\n    }\r\n\r\n    error(error) {\r\n        Helper.setErrors(error);\r\n    }\r\n    \r\n} ","export default class NavigationView {\r\n    constructor() {\r\n\r\n    }\r\n    init(navigationController) {\r\n        this.navigationController = navigationController;\r\n        \r\n        const addLocationButton = document.getElementById('addLocation');\r\n        \r\n        addLocationButton.addEventListener('click', () => {this.navigationController.addLocation()});\r\n        \r\n    }\r\n    refreshNavigation(data) {\r\n        \r\n        this.generateLocationMenu(data);\r\n        this.refreshLocationPage(data);\r\n    }\r\n\r\n    refreshLocationPage(data) {\r\n        let name = \"name unknown\";\r\n        if(data.getCurrentLocation().name != null)  name = data.getCurrentLocation().name;\r\n        document.getElementById(\"location_name\").innerHTML = name;\r\n    }\r\n\r\n    generateLocationMenu(data) {\r\n        this.clearNavigation();\r\n        const nav = document.getElementById(\"nav\"); \r\n        let i = 1;\r\n        data.locations.forEach((location) => {this.drawLocationButton(location, i,data); i++; });\r\n        \r\n    }\r\n\r\n    drawLocationButton(location, i,data) {\r\n            let name = \"name unkown\";\r\n            if(location.name != null)  name = location.name;\r\n            let navItem = document.createElement(\"div\");\r\n            navItem.className = \"flex flex-row navItem\";\r\n            \r\n            \r\n            let navButton = document.createElement(\"button\");\r\n            navButton.innerHTML = name;\r\n            navButton.addEventListener('click', () => { this.navigationController.setCurrentLocation(i); });\r\n\r\n            navButton.className = `navbutton bg-gray-200 p-3 pb-2 hover:bg-gray-500 hover:text-white flex flex-row`;\r\n                       \r\n            let deleteButton = document.createElement(\"button\");\r\n            deleteButton.addEventListener('click', () => { if(confirm('Are you sure you want to delete this location?')) this.navigationController.deleteLocation(i); });\r\n            deleteButton.className = ` bg-red-500 hover:bg-red-800 hover:text-white pl-3 pr-3`;\r\n            deleteButton.innerHTML = `X`;\r\n\r\n            navItem.appendChild(navButton);\r\n            navItem.appendChild(deleteButton);\r\n            nav.appendChild(navItem);\r\n            \r\n    }\r\n\r\n    clearNavigation() {\r\n        let elements = document.getElementsByClassName('navItem');\r\n        while(elements.length > 0){\r\n            elements[0].parentNode.removeChild(elements[0]);\r\n        }\r\n    }\r\n}","import Helper from \"./Helper\";\r\n\r\nexport default class StepView {\r\n    constructor() {\r\n       this.windowSize = 750;\r\n       this.gridSize = 15;\r\n       this.paneSize = this.windowSize / this.gridSize;\r\n    }\r\n\r\n    init(stepController) {\r\n        \r\n       \r\n        this.stepController = stepController;\r\n        \r\n\r\n        \r\n        document.getElementById(\"resetConfig\").addEventListener('click' , () => {stepController.resetConfig();})\r\n        Helper.clearErrors();\r\n    }\r\n    generateStep1() {\r\n        let block = document.getElementById(\"configuration_block\");\r\n        \r\n        block.className = 'h-full';\r\n        while (block.firstChild) {\r\n            block.removeChild(block.firstChild);\r\n        }\r\n\r\n        let nameInput = Helper.getInputField('nameInput', 'text');\r\n        let nameInputLabel = Helper.getLabel('Name: ', 'nameInput');\r\n        let inputblock1 = Helper.getDivForInput(nameInputLabel, nameInput);\r\n\r\n        let visitorInput = Helper.getInputField('vistorInput', 'number');\r\n        let visitorInputLabel = Helper.getLabel('Visitors: ', 'visitorInput');\r\n        let inputblock2 = Helper.getDivForInput(visitorInputLabel, visitorInput);\r\n        \r\n        let submitButton = Helper.getButton(\"next step\", () => {this.stepController.step1(nameInput.value, visitorInput.value)});\r\n        Helper.appendChilds([inputblock1, inputblock2, submitButton], block);\r\n    }\r\n\r\n    generateStep2() {\r\n        let block = document.getElementById(\"configuration_block\");\r\n\r\n        while (block.firstChild) {\r\n            block.removeChild(block.firstChild);\r\n        }\r\n\r\n        let tentInput = Helper.getInputField('tentInput', 'number');\r\n        let tentInputLabel = Helper.getLabel('Amount of tents: ', 'tentInput');\r\n        let inputblock = Helper.getDivForInput(tentInputLabel, tentInput);\r\n\r\n        let submitButton = Helper.getButton(\"next step\", () => {this.stepController.step2(tentInput.value); });\r\n\r\n        Helper.appendChilds([inputblock, submitButton], block);\r\n    }\r\n    generateStep3() {\r\n        let block = document.getElementById(\"configuration_block\");\r\n\r\n        while (block.firstChild) {\r\n            block.removeChild(block.firstChild);\r\n        }\r\n\r\n        let eatingStallsInput = Helper.getInputField('eatingStallInput', 'number');\r\n        let eatingStallInputLabel = Helper.getLabel('Amount of teating stalls: ', 'eatingStallInput');\r\n        let inputblock = Helper.getDivForInput(eatingStallInputLabel, eatingStallsInput);\r\n\r\n        let submitButton = Helper.getButton(\"next step\", () => {this.stepController.step3(eatingStallInput.value); });\r\n\r\n        Helper.appendChilds([inputblock, submitButton], block);\r\n    }\r\n\r\n    generateStep4() {\r\n        let block = document.getElementById(\"configuration_block\");\r\n\r\n        while (block.firstChild) {\r\n            block.removeChild(block.firstChild);\r\n        }\r\n\r\n        let drinkStallsInput = Helper.getInputField('drinkStallInput', 'number');\r\n        let drinkStallInputLabel = Helper.getLabel('Amount of tdrink stalls: ', 'drinkStallInput');\r\n        let inputblock = Helper.getDivForInput(drinkStallInputLabel, drinkStallsInput);\r\n\r\n        let submitButton = Helper.getButton(\"next step\", () => {this.stepController.step4(drinkStallInput.value); });\r\n\r\n        Helper.appendChilds([inputblock, submitButton], block);\r\n    }\r\n\r\n    generateStep5() {\r\n        let block = document.getElementById(\"configuration_block\");\r\n\r\n        while (block.firstChild) {\r\n            block.removeChild(block.firstChild);\r\n        }\r\n\r\n        let highTreeInput =  Helper.getInputField('highTreeInput', 'number');\r\n        let highTreeInputLabel = Helper.getLabel('Amount of high trees(1x1): ', 'highTreeInput');\r\n        let inputBlock1 = Helper.getDivForInput(highTreeInputLabel, highTreeInput);\r\n\r\n        let wideTreeInput =  Helper.getInputField('wideTreeInput', 'number');\r\n        let wideTreeInputLabel = Helper.getLabel('Amount of wide trees(2x1): ', 'wideTreeInput');\r\n        let inputBlock2 = Helper.getDivForInput(wideTreeInputLabel, wideTreeInput);\r\n\r\n        let shadowTreeInput =  Helper.getInputField('shadowTreeInput', 'number');\r\n        let shadowTreeInputLabel = Helper.getLabel('Amount of shadow trees(3x3): ', 'shadowTreeInput');\r\n        let inputBlock3 = Helper.getDivForInput(shadowTreeInputLabel, shadowTreeInput);\r\n\r\n        let submitButton = Helper.getButton(\"next step\", () => {this.stepController.step5(highTreeInput.value, wideTreeInput.value, shadowTreeInput.value)});\r\n\r\n        Helper.appendChilds([inputBlock1, inputBlock2, inputBlock3, submitButton], block)\r\n\r\n        \r\n    }\r\n\r\n    generateStep6() {\r\n        let block = document.getElementById(\"configuration_block\");\r\n\r\n        while (block.firstChild) {\r\n            block.removeChild(block.firstChild);\r\n        }\r\n\r\n        let toiletBuildingsInput = Helper.getInputField('toiletBuildingsInput', 'number');\r\n        let toiletBuildingsInputLabel = Helper.getLabel('Amount of toilet buildings: ', 'toiletBuildingsInput');\r\n        let inputblock = Helper.getDivForInput(toiletBuildingsInputLabel, toiletBuildingsInput);\r\n\r\n        let submitButton = Helper.getButton(\"next step\", () => {this.stepController.step6(toiletBuildingsInput.value); });\r\n\r\n        Helper.appendChilds([inputblock, submitButton] , block);\r\n\r\n    }\r\n\r\n    generateStep7(maximumAmountOfTrashcans) {\r\n        let block = document.getElementById(\"configuration_block\");\r\n\r\n        while (block.firstChild) {\r\n            block.removeChild(block.firstChild);\r\n        }\r\n\r\n        let trashCanInput = Helper.getInputField('trashCanInput', 'number');\r\n        let trashCanInputLabel = Helper.getLabel('Amount of trashcans (max: ' + maximumAmountOfTrashcans + '): ', 'trashCanInput');\r\n        let inputblock = Helper.getDivForInput(trashCanInputLabel, trashCanInput);\r\n\r\n        let submitButton = Helper.getButton(\"next step\", () => {this.stepController.step7(trashCanInput.value); });\r\n\r\n        Helper.appendChilds([inputblock, submitButton] , block);\r\n\r\n    }\r\n\r\n    generateFinal() {\r\n        let block = document.getElementById(\"configuration_block\");\r\n\r\n        while (block.firstChild) {\r\n            block.removeChild(block.firstChild);\r\n        }\r\n\r\n       \r\n        let label = document.createElement(\"div\");\r\n        label.innerHTML = \"You have now configured your location\";\r\n\r\n        block.appendChild(label);\r\n    }\r\n   \r\n    \r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import MainController from './Controllers/MainController.js'\r\nimport NavigationController from './Controllers/NavigationController.js'\r\nimport StepController from './Controllers/StepController.js'\r\nimport GridController from './Controllers/GridController.js'\r\n\r\nimport MainView from './Views/MainView.js'\r\nimport NavigationView from './Views/NavigationView.js'\r\nimport GridView from './Views/GridView.js'\r\n\r\nimport Data from './Models/Data.js'\r\nimport StepView from './Views/StepView.js'\r\n\r\nlet jsonString = localStorage.getItem('data');\r\nlet dataobject = JSON.parse(jsonString);\r\nconsole.log(dataobject);\r\n\r\nconst data = new Data(dataobject);\r\n\r\n\r\nlocalStorage.setItem('data', JSON.stringify(data));\r\n\r\n\r\n\r\nconst mainController = new MainController(data);\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}