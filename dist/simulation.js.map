{"version":3,"sources":["webpack://webjs/./src/Controllers/Simulation/LocationController.js","webpack://webjs/./src/Controllers/Simulation/SimulationController.js","webpack://webjs/./src/Controllers/Simulation/WaitingLineController.js","webpack://webjs/./src/Models/Data.js","webpack://webjs/./src/Models/EatingStand.js","webpack://webjs/./src/Models/Grid.js","webpack://webjs/./src/Models/GridBlock.js","webpack://webjs/./src/Models/Location.js","webpack://webjs/./src/Models/Simulation/GroupOfPeople.js","webpack://webjs/./src/Models/Simulation/Person.js","webpack://webjs/./src/Models/Simulation/WaitingLine.js","webpack://webjs/./src/Models/Simulation/Weather.js","webpack://webjs/./src/Models/Tent.js","webpack://webjs/./src/Models/Trashcan.js","webpack://webjs/./src/Views/simulation/LocationView.js","webpack://webjs/./src/Views/simulation/SimulationView.js","webpack://webjs/./src/Views/simulation/WaitingLineView.js","webpack://webjs/webpack/bootstrap","webpack://webjs/webpack/runtime/define property getters","webpack://webjs/webpack/runtime/hasOwnProperty shorthand","webpack://webjs/webpack/runtime/make namespace object","webpack://webjs/./src/simulation.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAEe;;AAEf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;AAIA,C;;;;;;;;;;;;;;;;;;;;;ACrBwD;AACM;AACS;AACF;AACJ;AAC1B;AACiB;;AAEzC;;AAEf;AACA,wBAAwB,oDAAI;AAC5B,mCAAmC,yEAAe;AAClD,kCAAkC,wEAAc;AAChD,gCAAgC,sEAAY;AAC5C,sCAAsC,2DAAkB;AACxD,yCAAyC,8DAAqB;;;AAG9D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;;AAEA;;;AAGA,C;;;;;;;;;;;;;;;AC9CoE;;AAErD;;AAEf;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET,4G;AACA,sBAAsB,2BAA2B;AACjD;;AAEA,oCAAoC,wEAAa;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,C;;;;;;;;;;;;;;;;AC3DoC;AACiB;;AAEtC;AACf;AACA;AACA,kCAAkC,iDAAQ,GAAG;AAC7C;AACA;AACA;AACA,kCAAkC,iDAAQ,GAAG;AAC7C;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,iDAAQ;AAChD,aAAa;AACb;;AAEA,SAAS;AACT,kCAAkC,iDAAQ,GAAG;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uDAAuD,iDAAQ,GAAG;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,2BAA2B;AACjD,uCAAuC,+DAAW;AAClD;;;AAGA,sBAAsB,8BAA8B;AACpD;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,8BAA8B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA,2BAA2B,iBAAiB;AAC5C,8BAA8B,iBAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA,SAAS;;;AAGT;AACA,C;;;;;;;;;;;;;;ACxHe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;;;;ACrB4C;AACF;AACM;AACd;;AAEnB;;AAEf;;AAEA;AACA,uBAAuB,QAAQ;AAC/B;AACA,2BAA2B,QAAQ;AACnC;AACA,2CAA2C,sDAAS,GAAG;AACvD,iBAAiB;AACjB,2CAA2C,sDAAS;AACpD;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,iDAAI;AACjC;AACA;;;;AAIA;AACA;;AAEA,oCAAoC,wDAAW;AAC/C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iCAAiC,qDAAQ;AACze;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;AC5D4B;;AAEb;;AAEf;AACA;AACA;AACA;;AAEA,wBAAwB,6CAAI;AAC5B;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,iEAAiE,6CAAI;;;;AAIrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC,yBAAyB;AAC/D,kDAAkD,+BAA+B;AACjF,kDAAkD,8BAA8B;AAChF,iDAAiD,6BAA6B;AAC9E,8CAA8C,8BAA8B;AAC5E,6CAA6C,+BAA+B;AAC5E,8CAA8C,8BAA8B;AAC5E,kDAAkD,gCAAgC;AAClF;;;AAGA;;AAEA;AACA;AACA,kDAAkD;AAClD,8DAA8D;AAC9D,4DAA4D;AAC5D,uDAAuD;AACvD,2DAA2D;AAC3D,2DAA2D;AAC3D,2DAA2D;AAC3D,+DAA+D;AAC/D;AACA;;AAEA;AACA;AACA,mDAAmD;AACnD,+DAA+D;AAC/D,6DAA6D;AAC7D,wDAAwD;AACxD,4DAA4D;AAC5D,4DAA4D;AAC5D,4DAA4D;AAC5D,gEAAgE;AAChE;AACA;;AAEA;AACA;AACA,sCAAsC;AACtC,kDAAkD;AAClD,kDAAkD;AAClD,iDAAiD;AACjD,8CAA8C;AAC9C,6CAA6C;AAC7C,8CAA8C;AAC9C,kDAAkD;AAClD;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC,yD;AACA,yD;AACA;AACA,yD;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC,yD;AACA,yD;AACA;AACA,yD;AACA;AACA;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC,yD;AACA,yD;AACA;AACA,yD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;ACvOgC;;AAEjB;AACf;AACA;AACA,sBAAsB,oBAAoB;AAC1C,iCAAiC,+CAAM;AACvC;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;ACde;;AAEf;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT,K;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACjDe;;AAEf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;ACzBe;;AAEf;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT,K;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;;;AC5Be;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACrBe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACrBe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,sBAAsB,gCAAgC;AACtD;AACA;AACA;;AAEA;;AAEA;AACA,sBAAsB,QAAQ;AAC9B,0BAA0B,QAAQ;AAClC;;AAEA;AACA;AACA,sBAAsB,QAAQ;AAC9B,0BAA0B,QAAQ;AAClC;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,uB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,S;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,4D;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA,sBAAsB,gCAAgC;AACtD;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA,gD;AACA;AACA;;AAEA;AACA;AACA,mB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;;AAET;AACA,C;;;;;;;;;;;;;;AC/Le;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;AC9Be;;AAEf;AACA,2D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,aAAa;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+B;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;;AAGT;;AAEA;AACA;AACA,8B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA,C;;;;;;UCnGA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;ACNmF;;AAEnF;AACA;AACA;;AAEA,+BAA+B,oFAAoB,a","file":"simulation.js","sourcesContent":["\r\n\r\nexport default class LocationController {\r\n\r\n    constructor(data, simulationController) {\r\n        this.data = data;\r\n        this.simulationController = simulationController;\r\n        this.locationView = simulationController.locationView;\r\n    }\r\n\r\n    refresh() {\r\n        this.locationView.refresh(this.data);\r\n        this.leavePeople();\r\n    }\r\n\r\n    leavePeople() {\r\n        this.data.leavePeople(1);\r\n    }\r\n\r\n\r\n\r\n}","import LocationController from './LocationController.js'\r\nimport WaitingLineController from './WaitingLineController.js'\r\nimport WaitingLineView from '../../Views/simulation/WaitingLineView.js'\r\nimport SimulationView from '../../Views/simulation/SimulationView.js'\r\nimport LocationView from '../../Views/simulation/LocationView.js'\r\nimport Data from '../../Models/Data.js'\r\nimport Weather from '../../Models/Simulation/Weather.js'\r\n\r\nexport default class SimulationController {\r\n\r\n    constructor(data) {\r\n        this.data = new Data(data);\r\n        this.waitingLineView = new WaitingLineView(this.waitingLineController);\r\n        this.simulationView = new SimulationView(this);\r\n        this.locationView = new LocationView(this);\r\n        this.locationController = new LocationController(this.data, this);\r\n        this.waitingLineController = new WaitingLineController(this.data, this);\r\n        \r\n\r\n        this.startSimulation();\r\n    }\r\n\r\n    startSimulation() {\r\n        this.simulationView.setMainView(this.data);\r\n        this.locationView.init(this.data);\r\n        this.waitingLineController.init();\r\n        this.timer = setInterval(() => this.refresh() , 1000);\r\n    }\r\n\r\n    refresh() {\r\n        if(this.paused) {\r\n            return;\r\n        }\r\n        this.simulationView.refresh();\r\n        this.waitingLineController.refresh();\r\n        this.locationController.refresh();\r\n        \r\n\r\n       \r\n    }\r\n\r\n    setNavigation()  {\r\n\r\n    }\r\n\r\n    \r\n}","import GroupOfPeople from '../../Models/Simulation/GroupOfPeople.js'\r\n\r\nexport default class WaitingLineController{\r\n\r\n    constructor(data, simulationController) {\r\n        this.data = data;\r\n        this.simulationController = simulationController;\r\n        \r\n        this.waitingLineView = this.simulationController.waitingLineView;\r\n    \r\n        this.amountOfVisitors = 0;\r\n    }\r\n\r\n    init() {\r\n        this.setVisitors();\r\n        this.data.setOpenWaitingLines(this.getAmountOfWaitingLinesOpen());\r\n        this.data.setWaitingLines();\r\n        this.waitingLineView.refresh(this.data);\r\n    }\r\n\r\n    refresh() {\r\n        \r\n        if(this.data.openWaitingLines != this.getAmountOfWaitingLinesOpen()) {\r\n            this.data.setOpenWaitingLines(this.getAmountOfWaitingLinesOpen());\r\n            this.data.setWaitingLines();\r\n        }\r\n        this.scanWaitingLines();\r\n        this.waitingLineView.refresh(this.data);\r\n        this.amountOfVisitors = this.amountOfVisitors + 13;\r\n    }\r\n\r\n    scanWaitingLines() {\r\n        this.data.scanWaitingLines();\r\n    }\r\n\r\n    setVisitors() {\r\n        let maxAmountOfVisitors = 0;\r\n\r\n        this.data.locations.forEach(location => {\r\n            maxAmountOfVisitors += location.visitors;\r\n        });\r\n\r\n        this.amountOfVisitors = Math.floor(Math.random() * maxAmountOfVisitors) + (3/4*maxAmountOfVisitors); \r\n        for(let i = 0; i < this.amountOfVisitors; ) {\r\n            let amountOfPeople = Math.floor(Math.random() * 4) + 1;\r\n            \r\n            let groupOfPeople = new GroupOfPeople(amountOfPeople);\r\n            this.data.addWaitingGroup(groupOfPeople);\r\n            i = i + amountOfPeople;\r\n        }\r\n        console.log(this.data.peopleInLine)\r\n    }\r\n\r\n    getAmountOfWaitingLinesOpen() {\r\n        let openWaitingLines = this.waitingLineView.getWaitingLines();\r\n       \r\n        return parseInt(openWaitingLines.value);\r\n    }\r\n\r\n}","import Location from \"./Location.js\"\r\nimport WaitingLine from \"./Simulation/WaitingLine.js\"\r\n\r\nexport default class Data {\r\n    constructor(dataobject) {\r\n        if(dataobject == null) {\r\n            this.locations = [new Location({})];\r\n            this.currentLocation = 1;\r\n        }\r\n        else if(dataobject.locations.length <= 0) {\r\n            this.locations = [new Location({})];\r\n            this.currentLocation = 1;\r\n        }\r\n        else if(dataobject != null) {\r\n            this.locations = [];\r\n            \r\n            dataobject.locations.forEach(element => {\r\n                this.locations.push(new Location(element));\r\n            });\r\n            this.currentLocation = dataobject.currentLocation;\r\n            \r\n        } else {\r\n            this.locations = [new Location({})];\r\n            this.currentLocation = 1;\r\n        }\r\n        this.peopleInLine = [];\r\n        this.waitingLines = [];\r\n        this.leftpeople = [];\r\n    }\r\n\r\n    addLocation(location) {\r\n        this.locations.push(location);\r\n    }\r\n    deleteLocation(location) {\r\n        \r\n           this.currentLocation = 1;\r\n        \r\n        this.locations.splice(location - 1,1)\r\n    }\r\n    getLocation(location) {\r\n        return this.locations[location - 1];\r\n    }\r\n    setCurrentLocation(location) {\r\n        this.currentLocation = location;\r\n    }\r\n    getCurrentLocation() {\r\n        \r\n        return this.locations[this.currentLocation - 1];\r\n    }\r\n    resetCurrentLocation() {\r\n        this.locations[this.currentLocation - 1] = new Location({});\r\n        this.locations[this.currentLocation - 1].setRegionLocked(false);\r\n    }\r\n    setOpenWaitingLines(lines) {\r\n        this.openWaitingLines = lines;\r\n    }\r\n    addWaitingGroup(waitingGroup) {\r\n        this.peopleInLine.push(waitingGroup);\r\n    }\r\n\r\n    setWaitingLines() {\r\n        let openLines = this.openWaitingLines;\r\n        this.waitingLines = [];\r\n        for(let i = 0; i < this.openWaitingLines; i++) {\r\n            this.waitingLines.push(new WaitingLine());\r\n        }\r\n        \r\n        \r\n        for(let i = 0; i < this.peopleInLine.length; i++) {\r\n            let line = Math.floor(Math.random() * openLines) ;\r\n\r\n            this.waitingLines[line].addGroupOfPeople(this.peopleInLine[i]);\r\n        }\r\n    }\r\n\r\n    scanWaitingLines() {\r\n        let scannedPeople = [];\r\n        for(let i = 0; i < this.waitingLines.length; i++) {\r\n            let groupOfPeople  = this.waitingLines[i].scan();\r\n            if(typeof groupOfPeople !== 'undefined') {\r\n                scannedPeople.push(groupOfPeople);\r\n            }\r\n        }\r\n        this.locateGroupsOfPeople(scannedPeople);\r\n    }\r\n    locateGroupsOfPeople(people) {\r\n    \r\n        people.forEach(group =>  {\r\n            let location = Math.floor(Math.random() * this.locations.length);\r\n            let x = Math.floor(Math.random() * 15);\r\n            let y = Math.floor(Math.random() * 15);\r\n            \r\n            while(!this.locations[location].getGridBlock(x,y).canPlace(group.getAmountOfPeople(), 7)) {\r\n                x = Math.floor(Math.random() * 14);\r\n                y = Math.floor(Math.random() * 14);\r\n            }\r\n            this.locations[location].addGroupOfPeople(x,y,group)\r\n        })\r\n        \r\n    }\r\n\r\n    leavePeople(percentage) {\r\n    \r\n        this.locations.forEach(location => {\r\n            let grid = location.grid.array;\r\n            for (let i = 0; i < grid.length; i++) {\r\n                for(let j = 0; j < grid.length; j++) {\r\n                    grid[i][j].groupsOfPeople.forEach(group => {\r\n                        let number = Math.floor(Math.random() * 101) + 1;\r\n                        if(number <= percentage) {\r\n                            grid[i][j].groupsOfPeople.shift();\r\n                        }\r\n                    })\r\n                    \r\n                }\r\n            }\r\n        });\r\n\r\n        \r\n    }\r\n}","export default class EatingStand {\r\n    \r\n    constructor() {\r\n        this.maxVisitors = 15;\r\n        this.standType = \"general\";\r\n    }\r\n    setMaxVisitors(newMaxVisitors) {\r\n        this.maxVisitors = newMaxVisitors;\r\n    }\r\n\r\n    getMaxVisitors() {\r\n        return this.maxVisitors;\r\n    }\r\n\r\n    setStandType(newStandType) {\r\n        this.standType = newStandType;\r\n    }\r\n    \r\n    getStandType() {\r\n        return this.standType;\r\n    }\r\n}","import GridBlock from \"../Models/GridBlock\";\r\nimport Trashcan from \"../Models/Trashcan\";\r\nimport EatingStand from \"../Models/EatingStand\";\r\nimport Tent from \"../Models/Tent\";\r\n\r\nexport default class Grid {\r\n    \r\n    constructor(grid) {\r\n\r\n        this.array = new Array(15);\r\n        for (var i = 0; i < 15; i++) {\r\n            this.array[i] = new Array(15);\r\n            for (var j = 0; j < 15; j++) {\r\n                if(grid == null) {\r\n                    this.array[i][j] = new GridBlock({});\r\n                } else{\r\n                    this.array[i][j] = new GridBlock(grid.array[i][j]);\r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    getItem(x,y) {\r\n        return this.array[x][y].getFillType();\r\n    }\r\n\r\n    addGroupOfPeople(x,y, people) {\r\n        this.array[x][y].addGroupOfPeople(people);\r\n    }\r\n\r\n    getAmountOfPeople(x,y) {\r\n        return this.array[x][y].getAmountOfPeople();\r\n    }\r\n\r\n\r\n    getGridBlock(x,y) {\r\n        return this.array[x - 1][ y-1];\r\n    }\r\n\r\n    getObject(x,y) {\r\n        return this.array[x][y].getObject();\r\n    }\r\n\r\n    setObject(x,y,obj) {\r\n        this.array[x][y].setObject(obj);\r\n    }\r\n\r\n    placeTent(x,y) {\r\n        this.array[x-1][y-1].setFillType(\"tentSurface\");\r\n        this.array[x][y-1].setFillType(\"tentSurface\");\r\n        this.array[x+1][y-1].setFillType(\"tentSurface\");\r\n        this.array[x-1][y].setFillType(\"tentSurface\");\r\n        this.array[x+1][y].setFillType(\"tentSurface\");\r\n        this.array[x-1][y+1].setFillType(\"tentSurface\");\r\n        this.array[x][y+1].setFillType(\"tentSurface\");\r\n        this.array[x+1][y+1].setFillType(\"tentSurface\");\r\n        this.array[x][y].setFillType(\"tent\");\r\n\r\n        let tentObject = new Tent();\r\n        this.array[x][y].setObject(tentObject);\r\n    }\r\n\r\n    \r\n\r\n    placeFoodStand(x,y) {\r\n        this.array[x][y].setFillType(\"foodStand\");\r\n\r\n        let eatingStandObject = new EatingStand();\r\n        this.array[x][y].setObject(eatingStandObject);\r\n    }\r\n\r\n    placeDrinkStand(x,y) {\r\n        this.array[x][y-1].setFillType(\"drinkStandSurface\");\r\n        this.array[x][y].setFillType(\"drinkStand\");\r\n    }\r\n    placeToilets(x,y) {\r\n        this.array[x][y-1].setFillType(\"toiletSurface\");\r\n        this.array[x][y+1].setFillType(\"toiletSurface\");\r\n        this.array[x][y].setFillType(\"toilet\");\r\n    }\r\n\r\n    placeHighTrees(x,y) {\r\n        this.array[x][y].setFillType(\"highTree\");\r\n        \r\n    }\r\n\r\n    placeWideTrees(x,y) {\r\n        this.array[x][y].setFillType(\"wideTree\");\r\n        this.array[x+1][y].setFillType(\"wideTreeSurface\");\r\n        \r\n    }\r\n    placeShadowTrees(x,y) {\r\n        this.array[x-1][y-1].setFillType(\"shadowTreeSurface\");\r\n        this.array[x][y-1].setFillType(\"shadowTreeSurface\");\r\n        this.array[x+1][y-1].setFillType(\"shadowTreeSurface\");\r\n        this.array[x-1][y].setFillType(\"shadowTreeSurface\");\r\n        this.array[x+1][y].setFillType(\"shadowTreeSurface\");\r\n        this.array[x-1][y+1].setFillType(\"shadowTreeSurface\");\r\n        this.array[x][y+1].setFillType(\"shadowTreeSurface\");\r\n        this.array[x+1][y+1].setFillType(\"shadowTreeSurface\");\r\n        this.array[x][y].setFillType(\"shadowTree\");\r\n    }\r\n\r\n    placeTrashcans( x,y) {\r\n        this.array[x][y].setFillType(\"trashcan\");\r\n\r\n        let trashcanObject = new Trashcan();\r\n        this.array[x][y].setObject(trashcanObject);\r\n    }\r\n    deleteTent(x,y) {\r\n        this.array[x-1][y-1].setFillType(null);\r\n        this.array[x][y-1].setFillType(null);\r\n        this.array[x+1][y-1].setFillType(null);\r\n        this.array[x-1][y].setFillType(null);\r\n        this.array[x+1][y].setFillType(null);\r\n        this.array[x-1][y+1].setFillType(null);\r\n        this.array[x][y+1].setFillType(null);\r\n        this.array[x+1][y+1].setFillType(null);\r\n        this.array[x][y].setFillType(null);\r\n        this.array[x][y].setFillType(null);\r\n        this.array[x][y].setObject(null);\r\n    }\r\n    deleteFoodStand(x,y) {\r\n        this.array[x][y].setFillType(null);\r\n        this.array[x][y].setObject(null);\r\n    }\r\n\r\n    deleteDrinkStand(x,y) {\r\n        this.array[x][y-1].setFillType(null);\r\n        this.array[x][y].setFillType(null);\r\n    }\r\n    deleteToilets(x,y) {\r\n        this.array[x][y-1].setFillType(null);\r\n        this.array[x][y+1].setFillType(null);\r\n        this.array[x][y].setFillType(null);\r\n    }\r\n\r\n    deleteHighTrees(x,y) {\r\n        this.array[x][y].setFillType(null);\r\n        \r\n    }\r\n\r\n    deleteWideTrees(x,y) {\r\n        this.array[x][y].setFillType(null);\r\n        this.array[x+1][y].setFillType(null);\r\n        \r\n    }\r\n    deleteShadowTrees(x,y) {\r\n        this.array[x-1][y-1].setFillType(null);\r\n        this.array[x][y-1].setFillType(null);\r\n        this.array[x+1][y-1].setFillType(null);\r\n        this.array[x-1][y].setFillType(null);\r\n        this.array[x+1][y].setFillType(null);\r\n        this.array[x-1][y+1].setFillType(null);\r\n        this.array[x][y+1].setFillType(null);\r\n        this.array[x+1][y+1].setFillType(null);\r\n        this.array[x][y].setFillType(null);\r\n    }\r\n\r\n    deleteTrashcans( x,y) {\r\n        this.array[x][y].setFillType(null);\r\n        this.array[x][y].setObject(null);\r\n    }\r\n    canPlaceTent(x,y) {\r\n        \r\n        if(x < 1 || y < 1 || x > 13 || y > 13) {\r\n            return false;\r\n        }\r\n        if(this.array[x-1][y-1].getFillType() != null || this.array[x][y-1].getFillType() != null || this.array[x+1][y-1].getFillType() != null) {\r\n            return false;\r\n        }\r\n        if(this.array[x-1][y].getFillType() != null || this.array[x+1][y].getFillType() != null || this.array[x-1][y+1].getFillType() != null) {\r\n            return false;\r\n        }\r\n        if(this.array[x][y+1].getFillType() != null || this.array[x+1][y+1].getFillType() != null || this.array[x][y].getFillType() != null) {\r\n            return false;\r\n\r\n        }\r\n        \r\n        return true;\r\n\r\n    }\r\n    canPlaceFoodStand(x,y) {\r\n        if(this.array[x][y].getFillType() != null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    canPlaceDrinkStand(x,y) {\r\n        if(y < 1) {\r\n            return false;\r\n        }\r\n        if(this.array[x][y].getFillType() != null || this.array[x][y-1].getFillType() != null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    canPlaceToilets(x,y) {\r\n        if(y < 1 || y > 13) {\r\n            return false;\r\n        }\r\n        if(this.array[x][y].getFillType() != null || this.array[x][y-1].getFillType() != null|| this.array[x][y+1].getFillType() != null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    canPlaceHighTrees(x,y) {\r\n        if(this.array[x][y].getFillType() != null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    canPlaceWideTrees(x,y) {\r\n        if(x > 13) {\r\n            return false;\r\n        }\r\n        if(this.array[x][y].getFillType() != null || this.array[x+1][y].getFillType() != null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    canPlaceShadowTrees(x,y) {\r\n        if(x < 1 || y < 1 || x > 13 || y > 13) {\r\n            return false;\r\n        }\r\n        if(this.array[x-1][y-1].getFillType() != null || this.array[x][y-1].getFillType() != null || this.array[x+1][y-1].getFillType() != null) {\r\n            return false;\r\n        }\r\n        if(this.array[x-1][y].getFillType() != null || this.array[x+1][y].getFillType() != null || this.array[x-1][y+1].getFillType() != null) {\r\n            return false;\r\n        }\r\n        if(this.array[x][y+1].getFillType() != null || this.array[x+1][y+1].getFillType() != null || this.array[x][y].getFillType() != null) {\r\n            return false;\r\n\r\n        }\r\n        return true;\r\n    }\r\n\r\n    canPlaceTrashcans( x,y) {\r\n        if(this.array[x][y].getFillType() != null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n     \r\n\r\n\r\n}","export default class GridBlock {\r\n    \r\n    constructor(gridblock) {\r\n        this.fillType = null;\r\n        this.groupsOfPeople = [];\r\n        this.object = null;\r\n        \r\n        if(typeof gridblock.fillType !== 'undefined') this.fillType = gridblock.fillType;\r\n        if(typeof gridblock.object !== 'undefined') this.object = gridblock.object;\r\n    }\r\n    setFillType(newFillType) {\r\n        this.fillType = newFillType;\r\n    }\r\n\r\n    getFillType() {\r\n        return this.fillType;\r\n    }\r\n    addGroupOfPeople(group) {\r\n        this.groupsOfPeople.push(group);\r\n    }\r\n\r\n    getAmountOfPeople() {\r\n        let amount = 0;\r\n        \r\n        this.groupsOfPeople.forEach(group => {\r\n            amount += group.getAmountOfPeople();\r\n        })\r\n\r\n        return amount;\r\n    }\r\n\r\n    canPlace(amount, maxAmountOfPeople) {\r\n        console.log(amount, maxAmountOfPeople)\r\n        if(this.fillType == \"tent\" || this.fillType == \"drinkStand\" || this.fillType==\"drinkStandSurface\" || this.fillType == \"toilet\"|| this.fillType==\"highTree\" || this.fillType == \"wideTree\" \r\n        || this.fillType==\"shadowTree\" || this.fillType ==\"foodStand\" || this.fillType ==\"trashcan\" || (amount + this.getAmountOfPeople() >= maxAmountOfPeople)) {\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n\r\n    getAllPeople() {\r\n        let people = [];\r\n        this.groupsOfPeople.forEach(group => {\r\n            group.people.forEach(person => {\r\n\r\n                people.push(person);\r\n            })\r\n        });\r\n\r\n        return people;\r\n    }\r\n\r\n    setObject(newObject) {\r\n        this.object = newObject;\r\n    }\r\n    \r\n    getObject() {\r\n        return this.object;\r\n    }\r\n}","import Grid from './Grid.js'\r\n\r\nexport default class Location {\r\n\r\n    constructor(location) {\r\n        this.treesAreSet = false;\r\n        this.stepsAreSet = false;\r\n        this.regionIsLocked = false;\r\n        \r\n        this.grid = new Grid(null);\r\n        if(typeof location.treesAreSet !== 'undefined') this.treesAreSet = location.treesAreSet;\r\n\r\n        if(typeof location.stepsAreSet !== 'undefined') this.stepsAreSet = location.stepsAreSet;\r\n\r\n        if(typeof location.regionIsLocked !== 'undefined') this.regionIsLocked = location.regionIsLocked;\r\n        \r\n        if(typeof location.name !== 'undefined') this.name = location.name;\r\n        \r\n        if(typeof location.visitors !== 'undefined') this.visitors = location.visitors;\r\n\r\n        if(typeof location.tents !== 'undefined') this.tents = location.tents;\r\n\r\n        if(typeof location.eatingStands !== 'undefined') this.eatingStands = location.eatingStands;\r\n\r\n        if(typeof location.drinkStands !== 'undefined') this.drinkStands = location.drinkStands;\r\n        \r\n        if(typeof location.highTrees !== 'undefined') this.highTrees = location.highTrees;\r\n \r\n        if(typeof location.wideTrees !== 'undefined') this.wideTrees = location.wideTrees;\r\n\r\n        if(typeof location.shadowTrees !== 'undefined') this.shadowTrees = location.shadowTrees;\r\n\r\n        if(typeof location.toiletBuildings !== 'undefined') this.toiletBuildings = location.toiletBuildings;\r\n\r\n        if(typeof location.trashcans !== 'undefined') this.trashcans = location.trashcans;\r\n\r\n        if(typeof location.grid !== 'undefined') this.grid = new Grid(location.grid);\r\n        \r\n    \r\n        \r\n    }\r\n    canPlace(x,y, type) {\r\n        switch (type) {\r\n            case \"tent\": return this.grid.canPlaceTent(x,y);\r\n            case \"drinkStand\":return this.grid.canPlaceDrinkStand(x,y);\r\n            case \"foodStand\": return this.grid.canPlaceFoodStand(x,y);\r\n            case \"toilet\": return this.grid.canPlaceToilets(x,y);\r\n            case \"trashcan\": return this.grid.canPlaceTrashcans(x,y);\r\n            case \"highTree\": return this.grid.canPlaceHighTrees(x,y);\r\n            case \"wideTree\": return this.grid.canPlaceWideTrees(x,y);\r\n            case \"shadowTree\": return this.grid.canPlaceShadowTrees(x,y);\r\n            case \"default\": return true;\r\n        }\r\n    }\r\n\r\n    placeItem(x,y,type) {\r\n        switch (type) {\r\n            case \"tent\": this.tents--;this.grid.placeTent(x,y); break;\r\n            case \"drinkStand\": this.drinkStands--;this.grid.placeDrinkStand(x,y);break;\r\n            case \"foodStand\": this.eatingStands--;this.grid.placeFoodStand(x,y);break;\r\n            case \"toilet\":this.toiletBuildings--; this.grid.placeToilets(x,y);break;\r\n            case \"trashcan\": this.trashcans--;this.grid.placeTrashcans(x,y);break;\r\n            case \"highTree\":this.highTrees--; this.grid.placeHighTrees(x,y);break;\r\n            case \"wideTree\": this.wideTrees--;this.grid.placeWideTrees(x,y);break;\r\n            case \"shadowTree\": this.shadowTrees--;this.grid.placeShadowTrees(x,y);break;\r\n        }\r\n\r\n        \r\n    }\r\n    \r\n    moveItem(x,y,type) {\r\n        switch (type) {\r\n            case \"tent\": this.grid.placeTent(x,y); break;\r\n            case \"drinkStand\": this.grid.placeDrinkStand(x,y);break;\r\n            case \"foodStand\": this.grid.placeFoodStand(x,y);break;\r\n            case \"toilet\": this.grid.placeToilets(x,y);break;\r\n            case \"trashcan\": this.grid.placeTrashcans(x,y);break;\r\n            case \"highTree\": this.grid.placeHighTrees(x,y);break;\r\n            case \"wideTree\": this.grid.placeWideTrees(x,y);break;\r\n            case \"shadowTree\": this.grid.placeShadowTrees(x,y);break;\r\n        }\r\n    }\r\n    \r\n    deleteItem(x,y,type) {\r\n        switch (type) {\r\n            case \"tent\": this.grid.deleteTent(x,y); break;\r\n            case \"drinkStand\": this.grid.deleteDrinkStand(x,y);break;\r\n            case \"foodStand\": this.grid.deleteFoodStand(x,y);break;\r\n            case \"toilet\": this.grid.deleteToilets(x,y);break;\r\n            case \"trashcan\": this.grid.deleteTrashcans(x,y);break;\r\n            case \"highTree\": this.grid.deleteHighTrees(x,y);break;\r\n            case \"wideTree\": this.grid.deleteWideTrees(x,y);break;\r\n            case \"shadowTree\": this.grid.deleteShadowTrees(x,y);break;\r\n        }\r\n    }\r\n\r\n    addItem(type) {\r\n        switch (type) {\r\n            case \"tent\": this.tents++; return;\r\n            case \"drinkStand\": this.drinkStands++; return;\r\n            case \"foodStand\": this.eatingStands++; return;\r\n            case \"toilet\":this.toiletBuildings++; return;\r\n            case \"trashcan\": this.trashcans++; return;\r\n            case \"highTree\":this.highTrees++; return;\r\n            case \"wideTree\": this.wideTrees++; return;\r\n            case \"shadowTree\": this.shadowTrees++; return;\r\n        }\r\n    }\r\n    setTrees() {\r\n        this.treesAreSet = true;\r\n        for(let i = 0; this.highTrees; i++) {\r\n            let x = Math.floor(Math.random() * (14 + 1)); \r\n            let y = Math.floor(Math.random() * (14 + 1)); \r\n            while(!this.canPlace(x,y,\"highTree\")) {\r\n                x = Math.floor(Math.random() * (14 + 1)); \r\n                y = Math.floor(Math.random() * (14 + 1));\r\n            }\r\n            this.placeItem(x,y,\"highTree\");\r\n        }\r\n        for(let i = 0; this.wideTrees; i++) {\r\n            let x = Math.floor(Math.random() * (14 + 1)); \r\n            let y = Math.floor(Math.random() * (14 + 1)); \r\n            while(!this.canPlace(x,y,\"wideTree\")) {\r\n                x = Math.floor(Math.random() * (14 + 1)); \r\n                y = Math.floor(Math.random() * (14 + 1));\r\n            }\r\n            this.placeItem(x,y,\"wideTree\");\r\n        }\r\n        for(let i = 0; this.shadowTrees; i++) {\r\n            let x = Math.floor(Math.random() * (14 + 1)); \r\n            let y = Math.floor(Math.random() * (14 + 1)); \r\n            while(!this.canPlace(x,y,\"shadowTree\")) {\r\n                x = Math.floor(Math.random() * (14 + 1)); \r\n                y = Math.floor(Math.random() * (14 + 1));\r\n            }\r\n            this.placeItem(x,y,\"shadowTree\");\r\n        }\r\n    }\r\n    setStepsAreSet(boolean) {\r\n        this.stepsAreSet = boolean;\r\n    }\r\n    \r\n    setName(name) {\r\n        this.name = name;\r\n    }\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    getVisitors() {\r\n        return this.visitors;\r\n    }\r\n\r\n    setVisitors(visitors) {\r\n        this.visitors = visitors;\r\n    }\r\n\r\n    setAmountOfTents(tents) {\r\n        this.tents = tents;\r\n    }\r\n\r\n    setAmountOfEatingStands(stands) {\r\n        this.eatingStands = stands;\r\n    }\r\n\r\n    setAmountOfDrinkStands(stands) {\r\n        this.drinkStands = stands;\r\n    }\r\n\r\n    setAmountOfHighTrees(trees) {\r\n        this.highTrees = trees;\r\n    }\r\n\r\n    setAmountOfWideTrees(trees) {\r\n        this.wideTrees = trees;\r\n    }\r\n\r\n    setAmountOfShadowTrees(trees) {\r\n        this.shadowTrees = trees;\r\n    }\r\n\r\n    setAmountOfToiletBuildings(toiletBuildings) {\r\n        this.toiletBuildings = toiletBuildings;\r\n    }\r\n\r\n    setAmountOfTrashCans(trashcans) {\r\n        this.trashcans = trashcans;\r\n    }\r\n    getAmountOfFieldsFilled() {\r\n        let filled = 0;\r\n        filled = this.tents * 9;\r\n        filled = filled + (this.eatingStands);\r\n        filled = filled + (this.drinkStands * 2);\r\n        filled = filled + (this.highTrees);\r\n        filled = filled + (this.wideTrees * 2);\r\n        filled = filled + (this.shadowTrees * 9);\r\n        filled = filled + (this.toiletBuildings * 3);\r\n\r\n        return filled;\r\n    }\r\n    getItem(x,y) {\r\n        return this.grid.getItem(x,y);\r\n    }\r\n\r\n    getGridBlock(x,y) {\r\n        return this.grid.array[x][y];\r\n    }\r\n    addGroupOfPeople(x,y, people) {\r\n        \r\n     \r\n        this.grid.addGroupOfPeople(x,y,people);\r\n    }\r\n\r\n    getAmountOfPeople(x,y) {\r\n        return this.grid.getAmountOfPeople(x,y);\r\n    }\r\n\r\n    getObject(x,y) {\r\n        return this.grid.getObject(x,y);\r\n    }\r\n\r\n    setObject(x,y, obj) {\r\n        this.grid.setObject(x,y,obj);\r\n    }\r\n\r\n    setRegionLocked(boolean){\r\n        this.regionIsLocked = boolean;\r\n    }\r\n\r\n    getRegionLocked(){\r\n        return this.regionIsLocked;\r\n    }\r\n}","import Person from './Person.js'\r\n\r\nexport default class GroupOfPeople {\r\n    constructor(amountOfPeople) {\r\n        this.people = [];\r\n        for(let i = 0; i < amountOfPeople; i++) {\r\n            this.people.push(new Person());\r\n        }\r\n    }\r\n\r\n    getAmountOfPeople() {\r\n        return this.people.length;\r\n    }\r\n\r\n}\r\n","export default class Person {\r\n\r\n    constructor() {\r\n        \r\n        var self = this;\r\n\r\n        fetch('https://randomuser.me/api/')\r\n        .then(\r\n          function(response) {\r\n            if (response.status !== 200) {\r\n              console.log('Looks like there was a problem. Status Code: ' +\r\n                response.status);\r\n              return;\r\n            }\r\n      \r\n            response.json().then(function(data) {\r\n                console.log(data.results[0]);\r\n              self.name = data.results[0].name.title + \" \" + data.results[0].name.first + \" \" + data.results[0].name.last;\r\n              self.gender = data.results[0].gender;\r\n              self.age = data.results[0].dob.age;\r\n              self.picture = data.results[0].picture.thumbnail;\r\n              self.country = data.results[0].location.country\r\n            });\r\n          }\r\n        )\r\n        .catch(function(err) {\r\n          console.log('Fetch Error :-S', err);\r\n        });\r\n    }   \r\n\r\n    getName(){\r\n        return this.name;\r\n    }\r\n\r\n    getGender(){\r\n        return this.gender;\r\n    }\r\n\r\n    getAge(){\r\n        return this.age;\r\n    }\r\n\r\n    getPicture(){\r\n        return this.picture;\r\n    }\r\n\r\n    getCountry(){\r\n        return this.country;\r\n    }\r\n}","export default class WaitingLine {\r\n\r\n    constructor() {\r\n        this.people = [];\r\n        this.scanSpeed = Math.floor(Math.random() * 3) + 1;\r\n        this.seconds = 0;\r\n    }\r\n\r\n    addGroupOfPeople(group) {\r\n        this.people.push(group);\r\n    }\r\n\r\n    scan() {\r\n        this.seconds++;\r\n        if(this.people.length > 0) {\r\n        let amountOfPeople = this.people[0].people.length;\r\n        \r\n        if(this.seconds >= amountOfPeople * this.scanSpeed) {\r\n            this.seconds = 0;\r\n            return this.people.shift();\r\n            \r\n        }\r\n    }\r\n        \r\n    }\r\n}\r\n","export default class Weather {\r\n\r\n    constructor() {\r\n        \r\n        var self = this;\r\n\r\n        fetch(\"http://api.openweathermap.org/data/2.5/weather?q='s-Hertogenbosch&appid=e68285f49070969fc85b1cc56080ab46\")\r\n        .then(\r\n          function(response) {\r\n            if (response.status !== 200) {\r\n              console.log('Looks like there was a problem. Status Code: ' +\r\n                response.status);\r\n              return;\r\n            }\r\n      \r\n            response.json().then(function(data) {\r\n              self.currentWeather = data.weather[0].main;\r\n            });\r\n          }\r\n        )\r\n        .catch(function(err) {\r\n          console.log('Fetch Error :-S', err);\r\n        });\r\n    }   \r\n\r\n    getCurrentWeather(){\r\n      return this.currentWeather;\r\n  }\r\n}","export default class Tent {\r\n    \r\n    constructor() {\r\n        this.maxVisitors = 5;\r\n        this.openingTimes = \"08:00\";\r\n    }\r\n    setMaxVisitors(newMaxVisitors) {\r\n        this.maxVisitors = newMaxVisitors;\r\n    }\r\n\r\n    getMaxVisitors() {\r\n        return this.maxVisitors;\r\n    }\r\n\r\n    setOpeningTimes(newOpeningTimes) {\r\n        this.openingTimes = newOpeningTimes;\r\n    }\r\n    \r\n    getOpeningTimes() {\r\n        return this.openingTimes;\r\n    }\r\n}","export default class Trashcan {\r\n    \r\n    constructor() {\r\n        this.kiloCapacity = 5;\r\n        this.emptyTime = \"08:00\";\r\n    }\r\n    setKiloCapacity(newKiloCapacity) {\r\n        this.kiloCapacity = newKiloCapacity;\r\n    }\r\n\r\n    getKiloCapacity() {\r\n        return this.kiloCapacity;\r\n    }\r\n\r\n    setEmptyTime(newEmptyTime) {\r\n        this.emptyTime = newEmptyTime;\r\n    }\r\n    \r\n    getEmptyTime() {\r\n        return this.emptyTime;\r\n    }\r\n}","export default class LocationView {\r\n    constructor(locationController) {\r\n        this.locationController = locationController;\r\n        this.locationBlocks = [];\r\n        this.locationBlockWidth = 350;\r\n        this.locationBlockHeight = 350;\r\n        this.gridWidth = this.locationBlockWidth / 15;\r\n        this.gridHeight = this.locationBlockHeight / 15;\r\n        this.groupWidth = 8;\r\n    }\r\n    init(data) {\r\n        let locationsblock = document.getElementById(\"locations-block\");\r\n        console.log(locationsblock);\r\n\r\n        data.locations.forEach((location) => {\r\n            let nameTag = document.createElement(\"span\");\r\n            nameTag.innerHTML = location.name;\r\n            let locationBlock = document.createElement(\"canvas\");\r\n            locationBlock.id = location.name;\r\n            locationBlock.setAttribute(\"width\", \"\" + this.locationBlockWidth);\r\n            locationBlock.setAttribute(\"height\", \"\" + this.locationBlockHeight);\r\n            locationBlock.className = \"locationblock bg-gray-100\"\r\n            let div = document.createElement(\"div\");\r\n            let canvas = locationBlock.getContext(\"2d\");\r\n            canvas.translate(0.5,0.5);\r\n            this.locationBlocks.push(canvas);\r\n            div.appendChild(nameTag);\r\n            div.appendChild(locationBlock);\r\n            locationBlock.addEventListener(\"mousemove\", (e) => this.hoverPeople(location, e.clientX - locationBlock.offsetLeft - locationBlock.scrollLeft, e.clientY - locationBlock.offsetTop - locationBlock.scrollTop));\r\n            locationsblock.appendChild(div);\r\n        });\r\n\r\n        this.drawLocations(data);\r\n        \r\n\r\n        \r\n    }\r\n\r\n    refresh(data) {\r\n        this.drawLocations(data);\r\n        this.clickEvents(data);\r\n    }\r\n\r\n    drawLocations(data) {\r\n       \r\n        for(let i = 0; i < this.locationBlocks.length; i++) {\r\n            this.drawLocation(data.locations[i] , this.locationBlocks[i]);\r\n        }\r\n    }\r\n\r\n    drawLocation(locationData, block) {\r\n        \r\n        block.clearRect(0, 0, this.locationBlockWidth, this.locationBlockHeight);\r\n        for(let x = 0; x < 15; x++) {\r\n            for(let y = 0; y < 15; y++) {\r\n                   this.drawBackgroundItem(locationData.grid.array[x][y].getFillType(), block,  x, y);\r\n                    \r\n            }\r\n        }\r\n        for(let x = 0; x < 15; x++) {\r\n            for(let y = 0; y < 15; y++) {\r\n                this.drawPeople(locationData.grid.array[x][y].getAmountOfPeople(), block, x, y);\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    drawPeople(amount, block,x,y) {\r\n        if(amount > 0) this.drawGroup(amount,block, x, y);\r\n        \r\n    }\r\n\r\n    drawGroup(amount, block, x, y) {\r\n       \r\n        block.strokeStyle = \"red\";\r\n        block.beginPath();\r\n        block.arc(x * this.gridWidth + this.gridWidth /2, y * this.gridHeight + this.gridHeight /2 , this.groupWidth, 0, 2 * Math.PI);\r\n        block.fillStyle = \"white\";\r\n        block.fill();\r\n        block.stroke();   \r\n        block.fillStyle = \"black\";\r\n        block.font = \"12px Arial\";\r\n       \r\n        block.fillText(amount, x * this.gridWidth + this.gridWidth /2 - 3, y * this.gridHeight + this.gridHeight /2 + 4);\r\n    }\r\n    drawBackgroundItem(type, block,x,y) {\r\n        if(type != null) {\r\n            let color = null;\r\n            let image = null;\r\n            //colors\r\n            if(type == \"tentSurface\" || type == \"tent\") {\r\n                color = \"yellow\";\r\n            } else if(type ==\"drinkStandSurface\" || type == \"drinkStand\") {\r\n                color = \"red\";\r\n            } else if(type ==\"toiletSurface\" || type == \"toilet\") {\r\n                color = \"gray\";\r\n            } else if(type ==\"highTreeSurface\" || type ==\"wideTreeSurface\" || type == \"shadowTreeSurface\" || type==\"highTree\" || type == \"wideTree\" || type==\"shadowTree\") {\r\n                color = \"green\";\r\n            } else if(type ==\"foodStand\") {\r\n                color = \"brown\";\r\n            }\r\n             else if(type ==\"trashcan\") {\r\n                color = \"gray\";\r\n            }\r\n            //images\r\n            if(type == \"tent\" || type ==\"drinkStand\" || type ==\"toilet\" || type==\"highTree\" || type == \"wideTree\" || type==\"shadowTree\" || type==\"foodStand\" || type ==\"trashcan\") {\r\n                image = type;\r\n            }\r\n\r\n            this.drawGridPane(x,y,color,image,block);\r\n        }            \r\n    }\r\n\r\n    drawGridPane(x,y,color,image, block) {\r\n        \r\n        block.fillStyle = color;\r\n        block.fillRect(x * this.gridWidth, y * this.gridHeight, this.gridWidth, this.gridHeight);\r\n        \r\n        if(image != null) {\r\n            let drawing = new Image();\r\n            drawing.src = \"../src/Images/\" + image + \".png\"; \r\n            \r\n            drawing.onload = () => {\r\n                block.drawImage(drawing,x * this.gridWidth, y * this.gridHeight, this.gridWidth, this.gridHeight);\r\n            }\r\n\r\n            \r\n        }\r\n    }\r\n\r\n    clickEvents(data) {\r\n        for(let i = 0; i < this.locationBlocks.length; i++) {\r\n            this.clickEventsLocation(data.locations[i] , this.locationBlocks[i]);\r\n        }\r\n    }\r\n\r\n    clickEventsLocation(locationdata, block) {\r\n        \r\n        \r\n    }\r\n\r\n    hoverPeople(location,x,y) {\r\n        if(x < 0 || y < 0) {\r\n            return;\r\n        }\r\n        let infoblock = document.getElementById(\"people-info-block\");\r\n\r\n        while (infoblock.firstChild) {\r\n           infoblock.removeChild(infoblock.firstChild);\r\n        }\r\n\r\n        x = Math.floor(x / 23.3);\r\n        y = Math.floor(y /23.3);\r\n\r\n\r\n\r\n        let infoheader = document.createElement(\"h1\");\r\n        infoheader.className = \"font-bold\"\r\n        infoheader.innerHTML = \"Info about block x\" + (x+1) + \", y\"+(y+1) + \" (\" + location.name +\")\";\r\n\r\n        infoblock.appendChild(infoheader);\r\n\r\n        let gridBlock = location.grid.getGridBlock(x + 1,y + 1);\r\n\r\n\r\n        let personinfoheader = document.createElement(\"span\");\r\n        personinfoheader.innerHTML = \"People in this block\"\r\n        personinfoheader.className = \"italic\";\r\n        infoblock.appendChild(personinfoheader);\r\n        if(gridBlock.getAmountOfPeople() <= 0) { \r\n            let personRow = document.createElement(\"span\");\r\n            personRow.innerHTML = \"-\";\r\n\r\n            infoblock.appendChild(personRow);\r\n        }\r\n        let i =  1; \r\n        gridBlock.groupsOfPeople.forEach(group => {\r\n            let groupRow = document.createElement(\"span\");\r\n            groupRow.innerHTML = \"group \" + i;\r\n            groupRow.className = \"font-bold\"\r\n            infoblock.appendChild(groupRow);\r\n            group.people.forEach(person => {\r\n                let personRow = document.createElement(\"span\");\r\n                personRow.className = \"ml-4\"\r\n                personRow.innerHTML = person.getName() + \" (\" + person.getAge() + \") (\"+ person.getGender() + \") \";\r\n                infoblock.appendChild(personRow);\r\n            });\r\n            i++;\r\n        });\r\n        \r\n    }\r\n}","export default class SimulationView {\r\n\r\n    constructor(simulationController) {\r\n        this.simulationController = simulationController;\r\n    }\r\n    setMainView(data) {\r\n    this.paused = false;\r\n    let pauseButton = document.getElementById(\"pause-simulation\");\r\n    pauseButton.addEventListener(\"click\",() => this.pausePlaySimulation());\r\n    \r\n}\r\n\r\npausePlaySimulation() {\r\n    \r\n    let pauseButton = document.getElementById(\"pause-simulation\");\r\n    if(this.simulationController.paused) {\r\n        this.simulationController.paused = false;\r\n        pauseButton.className = \"order-last p-3 bp-2 ml-10 bg-red-500 hover:bg-red-800 hover:text-white\";\r\n        pauseButton.innerHTML = \"pause simulation\";\r\n    } else {\r\n        this.simulationController.paused = true;\r\n        pauseButton.className = \"order-last p-3 bp-2 ml-10 bg-green-500 hover:bg-green-800 hover:text-white\";\r\n        pauseButton.innerHTML = \"start simulation\";\r\n    }\r\n    \r\n}\r\nrefresh() {\r\n    \r\n}\r\n\r\n}\r\n","export default class WaitingLineView {\r\n\r\n    constructor(waitingLineController) {\r\n        this.waitingLineController = waitingLineController; \r\n        this.waitingLineWidth = 25;\r\n        this.groupWidth = 7;\r\n        this.waitingLinesBlock = document.getElementById(\"waitingLine\");\r\n        this.waitingLinesHeight = this.waitingLinesBlock.height;\r\n        this.waitingLinesWidth = this.waitingLinesBlock.width;\r\n        this.waitingLineBlockHeight = 50;\r\n        this.canvas = this.waitingLinesBlock.getContext(\"2d\");\r\n        this.canvas.translate(0.5,0.0);\r\n    }\r\n\r\n    refresh(data) {\r\n        this.canvas.clearRect(0, 0, this.waitingLinesWidth, this.waitingLinesHeight);\r\n        this.drawScanBuilding();\r\n        this.drawWaitingLines(data.openWaitingLines);\r\n        \r\n        this.drawPeopleInLine(data.waitingLines);\r\n        \r\n    }\r\n\r\n    getWaitingLines() {\r\n        let waitingLineInput = document.getElementById(\"openWaitingLines\");\r\n    \r\n        return waitingLineInput;\r\n    }\r\n    drawScanBuilding() {\r\n        let block = this.canvas;\r\n        block.fillStyle = \"darkblue\";\r\n        block.fillRect(0, 0, this.waitingLinesWidth, this.waitingLineBlockHeight);\r\n    }\r\n    drawWaitingLines(amount) {\r\n        \r\n        let block = this.canvas;\r\n        let x = 0;\r\n        let width = this.waitingLineWidth;\r\n        let height = this.waitingLinesHeight;\r\n        block.strokeStyle = \"black\";\r\n        block.beginPath();\r\n        block.moveTo(0, this.waitingLineBlockHeight);\r\n        block.lineTo(0, height);\r\n        block.stroke();\r\n        for(let i = 1; i <= amount;i++) {\r\n            block.beginPath();\r\n            block.moveTo(i * width, 0 + this.waitingLineBlockHeight);\r\n            block.lineTo(i * width, height);\r\n            block.stroke();\r\n        }\r\n    }\r\n\r\n    drawPeopleInLine(waitingLines) {\r\n        let block = this.canvas;\r\n        let radius = this.groupWidth;\r\n        let line = 1;\r\n        let x = radius;\r\n        let y = radius;\r\n        let width = this.waitingLinesWidth;\r\n        \r\n        \r\n        waitingLines.forEach(waitingLine => {\r\n                block.fillStyle = \"white\";\r\n                block.font = \"15px Arial\";\r\n               \r\n                block.fillText(waitingLine.scanSpeed, (line - 1) * this.waitingLineWidth + this.waitingLineWidth / 2 - 4, this.waitingLineBlockHeight / 2);\r\n                block.font = \"10px Arial\";\r\n                block.fillText(\"sec\", (line - 1) * this.waitingLineWidth + this.waitingLineWidth / 2 -7, this.waitingLineBlockHeight / 2 + 10);\r\n            waitingLine.people.forEach(waitingGroup => {\r\n                block.strokeStyle = \"red\";\r\n                block.beginPath();\r\n                block.arc((line - 1)* this.waitingLineWidth + this.waitingLineWidth /2, y + this.waitingLineBlockHeight + 5, radius, 0, 2 * Math.PI);\r\n                block.stroke();   \r\n                block.fillStyle = \"black\";\r\n                block.font = \"12px Arial\";\r\n               \r\n                block.fillText(waitingGroup.people.length, (line - 1)* this.waitingLineWidth + this.waitingLineWidth /2 -3 , y + this.waitingLineBlockHeight + 5 + 5);\r\n                 y+= radius * 2 + 3;\r\n            });\r\n            y = radius;\r\n            line++;\r\n        });\r\n        \r\n        \r\n        // peopleinline.forEach(waitingGroup => {\r\n            \r\n        //     \r\n        //     block.arc(x, y, radius, 0, 2 * Math.PI);\r\n        //     block.stroke();   \r\n        //     block.font = \"20px Arial\";\r\n        //     block.fillText(waitingGroup.people.length, x - radius + 5 , y +  6);\r\n        //     x+= radius*2;\r\n        //     if(x >= width) {\r\n        //         x = radius;\r\n        //         y += radius * 2;\r\n        //     }\r\n        // })\r\n    }\r\n\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import SimulationController from \"./Controllers/Simulation/SimulationController.js\"\r\n\r\nlet jsonString = localStorage.getItem('data');\r\nlet dataobject = JSON.parse(jsonString);\r\nconsole.log(dataobject);\r\n\r\nlet simulationController = new SimulationController(dataobject);"],"sourceRoot":""}